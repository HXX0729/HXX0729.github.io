<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>template</title>
    <url>/2025/09/05/template/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Leetcode（连载中）</title>
    <url>/2025/09/05/lc/Leetcode%EF%BC%88%E8%BF%9E%E8%BD%BD%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<p>&#x3D;&#x3D;哈希&#x3D;&#x3D;</p>
<h1 id="Day1-字母异位词分组"><a href="#Day1-字母异位词分组" class="headerlink" title="Day1  字母异位词分组"></a>Day1  <a href="https://leetcode.cn/problems/group-anagrams/">字母异位词分组</a></h1><ol>
<li>sorted(一个string)返回的结果是一个列表，把单词的每个字母排序构成，因此需要使用 “”.join(这个列表) 把他们重新拼会字符串</li>
<li>  mp &#x3D; collections.defaultdict(list)，比起普通的字典，在初次遇到一个key的时候，会自动创建一个默认值</li>
<li>defauldict(必须提供参数，作为默认值)</li>
<li>dict.values()返回的是一个视图，必须list（）来显示转化为list</li>
</ol>
<h1 id="Day4-两数之和"><a href="#Day4-两数之和" class="headerlink" title="Day4 [两数之和]"></a>Day4 [两数之和]</h1><ol>
<li>这道题目要求返回的是下标，因此不能用排序+双指针</li>
<li>一边遍历nums一遍插入哈希表(这样比起先一下子建好哈希表，可以避免重复取2次自己），以num作为key，index作为v</li>
<li>每次遍历的时候顺便看看target - num在不在哈希表里</li>
<li>enumerate(nums) 可以直接获得 index， num</li>
<li>先查找，后插入</li>
</ol>
<h1 id="Day2-最长连续序列"><a href="#Day2-最长连续序列" class="headerlink" title="Day2  最长连续序列"></a>Day2  <a href="https://leetcode.cn/problems/longest-consecutive-sequence/">最长连续序列</a></h1><ol>
<li>使用set，即cpp中的unordered_set，这也是哈希表。通过in可以判断元素是否在哈希表中命中</li>
<li>贪心思想：如果这个数在数组里，那么一直判断他+1是否还在，直到不在</li>
<li>节省不必要的判断： 如果x在，那么x+1的最长序列肯定干不过x，因此只要判断x在，那么x+1直接跳过</li>
<li>dict和set底层都是哈希表，哈希表对key进行hash（），定位到内存中的桶。不同的是：dict的桶里面存放了完整的k-v，而set里面只存放了key本身。因此dict适合用来做映射，set适合用来做定位。</li>
</ol>
<p>&#x3D;&#x3D;&#x3D;数组&#x3D;&#x3D;</p>
<h1 id="Day3-最大子数组和"><a href="#Day3-最大子数组和" class="headerlink" title="Day3 最大子数组和"></a>Day3 <a href="https://leetcode.cn/problems/maximum-subarray/">最大子数组和</a></h1><ol>
<li>局部最优和全局最优：设置一个cur，largest，每次比较cur是否超过largest</li>
<li>有效前缀：如果前面一个子数组的sum＞0，才是有效的，否则是累赘，后面再怎么捞也不如不加</li>
<li>着眼点要放在每一个元素上，考虑这个元素应该加入前面的数组还是自立门户</li>
<li>dp子问题：以nums[i]结尾的子数组，找出其中最大的：对于这样的子数组，要么就是一个nums[i]，要么还会吸纳前面的dp[i-1]，所以求出dp[i]依赖于dp[i-1]的答案，就有了状态方程</li>
<li>这种“<strong>当前问题的最优解，可以由子问题的最优解推导出来</strong>”的特性，就是<strong>最优子结构</strong>。</li>
</ol>
<h1 id="Day3-轮转数组"><a href="#Day3-轮转数组" class="headerlink" title="Day3 轮转数组"></a>Day3 <a href="https://leetcode.cn/problems/rotate-array/">轮转数组</a></h1><ol>
<li>nums[:] 是对列表的原地修改</li>
<li>nums[-k:]是取出后k个元素</li>
<li>nums[::-1]是反转</li>
<li>Python函数传参 传的是 对象的引用，因此如果对原来的变量名进行reassign，那么其实会新开一块内存，而非原地修改</li>
<li>轮转 k 次等于轮转 k % n 次</li>
</ol>
<h1 id="Day3-合并区间"><a href="#Day3-合并区间" class="headerlink" title="Day3 合并区间"></a>Day3 <a href="https://leetcode.cn/problems/merge-intervals/">合并区间</a></h1><ol>
<li> intervals.sort(key &#x3D; lambda x: x[0])，按照特定规则排序</li>
<li>先将区间的第一个元素进行排序，然后利用栈，每进来一个都看看能不能合成大西瓜</li>
<li>for i in intervals[1:] 可以略过第一个元素遍历后面的（适用于第一个元素单独处理的情况）wosh</li>
</ol>
<h1 id="Day4-除自身以外数组的乘积"><a href="#Day4-除自身以外数组的乘积" class="headerlink" title="Day4 除自身以外数组的乘积"></a>Day4 <a href="https://leetcode.cn/problems/product-of-array-except-self/">除自身以外数组的乘积</a></h1><ol>
<li>range(start, stop, step)用来像cpp那样从后往前遍历元素</li>
<li>for num in reversed(nums)也可以倒着取元素，而且reversed返回的是迭代器，不占空间</li>
<li>i的后缀等于i+1的后缀 * i+1</li>
<li>题目的提示可能会给提示</li>
<li>Python通过 suffix &#x3D; [0] * n， 预先填0可以实现预分配空间</li>
</ol>
<h1 id="Day4-缺失的第一个正数"><a href="#Day4-缺失的第一个正数" class="headerlink" title="Day4 缺失的第一个正数"></a>Day4 <a href="https://leetcode.cn/problems/first-missing-positive/">缺失的第一个正数</a></h1><ol>
<li>长度为n的数组，最好的情况也就是1到n排满，那么第一个缺失的正数就是n+1</li>
<li>所以如果里面有不是1 - n 的数，那么 1 - n 之间一定有空缺的数</li>
<li>原地哈希：让每个数排到自己值的序号上，这样就建立了 1一定在索引为1的位置上，2一定在索引为2的位置上，这样谁的位置的空缺的就一目了然了</li>
<li>通过不断交换两个数，最终实现所有数都在自己的位置上，需要一个while循环，每个数最多被交换一遍，因此On</li>
<li>Python中交换两个数不需要swap，a, b &#x3D; b, a</li>
</ol>
<p>&#x3D;&#x3D;双指针&#x3D;&#x3D;&#x3D;</p>
<h1 id="Day4-移动零"><a href="#Day4-移动零" class="headerlink" title="Day4 移动零"></a>Day4 <a href="https://leetcode.cn/problems/move-zeroes/">移动零</a></h1><ol>
<li>双指针可以原地修改，top指向下一个被覆盖的元素，cur指向下一个遍历到进行处理的元素</li>
</ol>
<h1 id="Day4-盛最多水的容器"><a href="#Day4-盛最多水的容器" class="headerlink" title="Day4 盛最多水的容器"></a>Day4 <a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></h1><ol>
<li>对于这种左右对称，要遍历C(n,2)种情况的，不妨设想两个指针分别从两边往里移动，此时是可以覆盖所有C(n,2)的</li>
<li>指针位于两端的时候，width肯定是最大的，那么往里移动，width必然减小，所以height必须要增大</li>
<li>开始考虑剪枝：如果左边的板子是矮的，那么肯定要移动左边的板子才有可能变大。右边同理</li>
<li>这样左边走一点，右边走一点，可以排除不可能成为最大值的那些组合，因为那些组合肯定还干不过现在的组合。从而转化为线性扫描的问题。</li>
</ol>
<h1 id="Day4-三数之和"><a href="#Day4-三数之和" class="headerlink" title="Day4 三数之和"></a>Day4 <a href="https://leetcode.cn/problems/3sum/">三数之和</a></h1><ol>
<li>由于题目要求答案中不可以包含重复的三元组：不妨设，我们的答案中的三个数字分别是从小到大排序。那么如果我们先对整个数组排序，然后主循环第一个后，后面两个都在后面再找，那么我们找到的三元组的结构一定符合i&lt;&#x3D;j&lt;&#x3D;k</li>
<li>可以使用set去重，然后使用列表推导式[list(item) for item in my_set]将set里面的tuple再次转化回list，因为set里面要求是不可变元素</li>
<li>固定第一个元素，将其转化为两数之和为target的题目</li>
<li>为什么双指针不能回头：因为双指针每次只能走一步，那么回头的情况，之前肯定已经处理过了</li>
</ol>
<p>&#x3D;&#x3D;滑动窗口 &#x3D;&#x3D;</p>
<h1 id="Day5-无重复字符的最长子串"><a href="#Day5-无重复字符的最长子串" class="headerlink" title="Day5 无重复字符的最长子串"></a>Day5 <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h1><ol>
<li>滑动窗口的l和r都向前蠕动，向毛毛虫那样</li>
<li>先试图扩张右边，如果受阻，则扩张左边</li>
<li>这道题其实可以用散列表记录当前子串各个字母的下标，如果右边遇到了重复的，则左边边界可以直接移动到重复的之后</li>
<li>set可以使用add和remove，不需要每次都建立一个set</li>
<li>l &#x3D; 0 和 r &#x3D; 0的定义分开写</li>
</ol>
<h1 id="Day5-找到字符串中所有字母异位词"><a href="#Day5-找到字符串中所有字母异位词" class="headerlink" title="Day5 找到字符串中所有字母异位词"></a>Day5 <a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">找到字符串中所有字母异位词</a></h1><ol>
<li>x.sorted()是原地排序</li>
<li>sorted(x)是返回一个排序完的列表</li>
<li>reversed(x)返回的是迭代器</li>
<li>朴素思路：拿一个固定窗口去滑，通过sort对比是否一样</li>
<li>强化思路：用哈希表存当前子串中每个字母的数量，通过数量是否一致来进行比对。但是注意哈希表的key一开始就要包含了26个字母，否则会判定为哈希表不想等。因此要使用字典推导式来初始化含有26个字母的哈希表：{char: 0  for char in ascii.lowercase}</li>
<li>string.ascii_lowercase 提供了字符串 “abcdefghijklmnopqrstuvwxyz” # 使用字典推导式来创建字典 char_counts &#x3D; {char: 0 for char in string.ascii_lowercase}</li>
</ol>
<p>&#x3D;&#x3D;子串&#x3D;&#x3D; ： 前缀和 -  前缀和</p>
<h1 id="Day5-和为-K-的子数组"><a href="#Day5-和为-K-的子数组" class="headerlink" title="Day5 和为 K 的子数组"></a>Day5 <a href="https://leetcode.cn/problems/subarray-sum-equals-k/">和为 K 的子数组</a></h1><ol>
<li>任意一个子串的和可以表示为后面到0的和 - 前面到0的和，即sumj-sumi&#x3D;k,这就转化成了一个[[两数之和]]的题目。而两数之和可以转化成哈希表中查找一个数是否存在，因此对于任意一个sumj，希望能找到一个sumi &#x3D; sumj - k。</li>
<li>对于两数之和，需要先查找，后插入</li>
<li>特殊：对于从开头开始，且本身sum就是k的子串，由于我们希望在哈希表中找到一个sum前，现在sum后-k &#x3D; sum前。但是由于我们对于第一个数组并没有sum前，因此人为设置一个freq[0]&#x3D;1。当然也可以直接遍历这个哈希表，看看有没有key&#x3D;k的。但是前缀和问题先初始化 <code>&#123;0: 1&#125;</code>” 已经成为了解决此类问题的一个<strong>标准范式 (Standard Paradigm)</strong></li>
</ol>
<h1 id="Day8-滑动窗口最大值"><a href="#Day8-滑动窗口最大值" class="headerlink" title="Day8 滑动窗口最大值"></a>Day8 <a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h1><p>&#x3D;&#x3D;单调队列&#x3D;&#x3D;</p>
<ol>
<li>以nums[i]，nums[j]为首尾的窗口的长度为 j - i + 1</li>
<li>双端队列 collections.deque()<ol>
<li>pop()</li>
<li>q.append()</li>
<li>popleft()</li>
</ol>
</li>
<li>遍历下标和值：for i, k in enumerate(nums):</li>
<li> while q and nums[q[-1]] &lt; nums[i]: 判断q非空，可以避免在第一次里面还没有元素的时候，由于访问不了下标而报错，无法插入元素</li>
<li>单调队列：如果你的元素在前面，还没有后面的大，那么永远无法成为最大元素的可能了，因为后面比你年轻的还比你强</li>
<li>单调队列大致分为3个操作: 入，出，获得最大值。入的话，需要把前面比自己大的元素全部pop掉，这样每次排在自己前面的只可能是比自己大的</li>
<li>出:由于有的元素可能由于无法维持单调性已经被pop了，因此通过下标的计算来判断这个队头是否应该在窗口里，如果还在，说明应该被pop的其实早就被干掉了，所以这一轮无需操作</li>
<li>我们最外层遍历的是新加入窗口的元素，因此for遍历到len(nums)就行。</li>
<li>在ans.append时，由于前几个还没到窗口的大小，因此不该作为答案添加，因此要在append前加入一个if判断，里面下标的计算带一个数试一下就知道怎么设置了</li>
</ol>
<h1 id="Day8-矩阵置零"><a href="#Day8-矩阵置零" class="headerlink" title="Day8 矩阵置零"></a>Day8 <a href="https://leetcode.cn/problems/set-matrix-zeroes/">矩阵置零</a></h1><ol>
<li>超简单，第一次一分钟做完。分2次遍历矩阵，第一次记录所有0的行和列，用set实现快速查找。第二次再把这些行列的元素全部置0就好</li>
</ol>
<h1 id="Day8-螺旋矩阵"><a href="#Day8-螺旋矩阵" class="headerlink" title="Day8 螺旋矩阵"></a>Day8 <a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></h1><ol>
<li>采用模拟的方法，每次都遍历一遍最外圈一层</li>
<li>设置4个边界 top bottom left right，每遍历完一层之后，边界就收缩</li>
<li>当两个边界错位后，停止</li>
<li>最后两个条的遍历，即从右往左 和 从下往上的遍历前，需要额外判断边界是否已经越界，因为前两次已经更改了边界，但是大while循环里是四次才判断一次</li>
</ol>
<h1 id="Day9-旋转图像"><a href="#Day9-旋转图像" class="headerlink" title="Day9  旋转图像"></a>Day9  <a href="https://leetcode.cn/problems/rotate-image/">旋转图像</a></h1><ol>
<li>数学可证：顺时针旋转90°&#x3D;&#x3D; 对角线翻转 + 左右对称</li>
<li>左右对称可以使用Python内置的数组.reverse</li>
<li>Python 排序与翻转方法总结</li>
</ol>
<table>
<thead>
<tr>
<th>操作</th>
<th>语法 (<code>Syntax</code>)</th>
<th>作用</th>
<th>是否修改原始对象？</th>
<th>返回值 (<code>Return Value</code>)</th>
</tr>
</thead>
<tbody><tr>
<td><strong>排序 (Sorted)</strong></td>
<td><code>sorted(iterable)</code></td>
<td>对任何可迭代对象进行排序，并<strong>返回一个新列表</strong>。</td>
<td><strong>否</strong></td>
<td>一个<strong>新的、排好序的列表 (<code>list</code>)</strong></td>
</tr>
<tr>
<td><strong>排序 (Sort)</strong></td>
<td><code>my_list.sort()</code></td>
<td><strong>原地</strong>对一个列表进行排序。</td>
<td><strong>是</strong></td>
<td><strong><code>None</code></strong></td>
</tr>
<tr>
<td><strong>翻转 (Reversed)</strong></td>
<td><code>reversed(sequence)</code></td>
<td>返回一个可以倒序遍历序列的<strong>迭代器</strong>。</td>
<td><strong>否</strong></td>
<td>一个<strong>反向迭代器 (<code>iterator</code>)</strong></td>
</tr>
<tr>
<td><strong>翻转 (Reverse)</strong></td>
<td><code>my_list.reverse()</code></td>
<td><strong>原地</strong>翻转一个列表。</td>
<td><strong>是</strong></td>
<td><strong><code>None</code></strong></td>
</tr>
</tbody></table>
<h1 id="Day9-搜索二维矩阵-II"><a href="#Day9-搜索二维矩阵-II" class="headerlink" title="Day9 搜索二维矩阵 II"></a>Day9 <a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">搜索二维矩阵 II</a></h1><ol>
<li>起始点要选取在右上角，这样如果想变小，只能往左走，要变大只能往下走，确定</li>
<li>当坐标超出边界后终止while循环</li>
</ol>
<p>&#x3D;&#x3D;链表&#x3D;&#x3D;</p>
<h1 id="Day9-相交链表"><a href="#Day9-相交链表" class="headerlink" title="Day9 相交链表"></a>Day9 <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">相交链表</a></h1><ol>
<li><p>Optional[ListNode] 表示这个变量要么是空要么是ListNode类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line"></span><br><span class="line">         <span class="variable language_">self</span>.val = x</span><br><span class="line"></span><br><span class="line">         <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python没有指针，因此直接引用 来代替 指针，引用就是变量名。所以看起来好像是把下一个节点包含在自己体内了</p>
</li>
<li><p>变量名就是引用，变量名.next就是下一个元素引用的本身</p>
</li>
<li><p>先把一条链的所有引用存到set里面，再遍历第二条链，如果存在，那么就说明这是公共节点</p>
</li>
<li><p>把一个变量（引用）存到set里的过程：根据a指向的id，计算hash(id)，然后创建了一个新的引用，把这个新引用存进去</p>
</li>
</ol>
<h1 id="Day9-反转链表"><a href="#Day9-反转链表" class="headerlink" title="Day9 反转链表"></a>Day9 <a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></h1><ol>
<li>两个移动主指针，pre和cur</li>
<li>初始化：pre是None，cur是head，这样能保证不需要任何特殊处理</li>
<li>每次修改cur的指针，修改前需要备份cur.next</li>
<li>修改后，pre移到cur，cur移到备份</li>
</ol>
<h1 id="Day9-回文链表"><a href="#Day9-回文链表" class="headerlink" title="Day9 回文链表"></a>Day9 <a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a></h1><ol>
<li>通过return nums[::-1] &#x3D;&#x3D; nums 直接返回bool，不用再if return True了 </li>
<li>也可以用快慢指针来做</li>
</ol>
<h1 id="Day9-环形链表"><a href="#Day9-环形链表" class="headerlink" title="Day9 环形链表"></a>Day9 <a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></h1><ol>
<li>和前面那个查找两个链表有没有相同元素一样，记录已经遍历过的节点，一旦有重复，就说明有环</li>
<li>进阶：快慢指针（龟兔赛跑）：慢指针step&#x3D;1，快指针step&#x3D;2。当慢指针第一次进入环时，快指针相对于慢指针的速度就是1，所以肯定可以追上</li>
<li>快慢指针：slow初始化为head，fast初始化为head.next。注意如果next或者next.next调用前，都要判断是否为空，如果空直接false。因为如果有环是不可能有出口的。</li>
</ol>
<h1 id="Day10-环形链表-II"><a href="#Day10-环形链表-II" class="headerlink" title="Day10 环形链表 II"></a>Day10 <a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表 II</a></h1><ol>
<li>和上一题的思路基本一致，就是哈希表存已经访问过的节点</li>
<li>也可以通过快慢指针，然后通过一个数学特性算出第一个重复的节点是谁</li>
</ol>
<h1 id="Day10-合并两个有序链表"><a href="#Day10-合并两个有序链表" class="headerlink" title="Day10 合并两个有序链表"></a>Day10 <a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></h1><ol>
<li>用两个指针分别指向两个表头，每次选取小的那个加入新链表。因为对于同一个链表在结果链表中的元素，肯定是有序的，因此只需要保证每次两个链表中跳转初也是有序的就好</li>
<li>可以建立一个哨兵节点，就是new一个任意值的node，然后头节点就不需要特殊处理了</li>
</ol>
<h1 id="Day11-两数相加"><a href="#Day11-两数相加" class="headerlink" title="Day11 两数相加"></a>Day11 <a href="https://leetcode.cn/problems/add-two-numbers/">两数相加</a></h1><ol>
<li>zza之前带我做过的题目</li>
<li>Gemini优化：设置prehead，这样头节点不需要单独处理</li>
<li>使用while l1 or l2 or carry，这样只要有一个没走完，就能继续使用同一套处理逻辑</li>
<li>两个数的值先用2个本地的int变量存储，这样即使一个节点是空的，我们也不需要构造一个val&#x3D;0的节点，而是把这个int变量&#x3D;0就行</li>
<li>善用a &#x3D; b if condition else c，提升面临两种选择的灵活性</li>
<li>链表不要忘了继续往前走，不然会死循环超时</li>
</ol>
<h1 id="Day11-删除链表的倒数第-N-个结点"><a href="#Day11-删除链表的倒数第-N-个结点" class="headerlink" title="Day11 删除链表的倒数第 N 个结点"></a>Day11 <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第 N 个结点</a></h1><ol>
<li>双指针法，second和first中间间隔n个，这样second到达空时，first正好在倒数第n个</li>
<li>first初始化为prehead，second初始化为head</li>
<li>返回prehead.next</li>
</ol>
<h1 id="Day12-两两交换链表中的节点"><a href="#Day12-两两交换链表中的节点" class="headerlink" title="Day12 两两交换链表中的节点"></a>Day12 <a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">两两交换链表中的节点</a></h1><ol>
<li>如何防止链表的节点指导None.next?</li>
<li>每次只维护一个指针prev，而他后面的两个指针在while循环内再定义。这样就可以在while的循环条件中设置prev.next.next是否存在。</li>
<li>在循环里再定义的好处是，如果在外面定义，那么在循环里需要对3个指针进行迭代，很容易指空</li>
<li>递归解法：假设链表只有前两个没交换，后面都是交换好的，后面使用递归函数返回交换好的列表的头节点。我们只需要把这三个节点接好就行</li>
</ol>
<h1 id="Day12-随机链表的复制"><a href="#Day12-随机链表的复制" class="headerlink" title="Day12 随机链表的复制"></a>Day12 <a href="https://leetcode.cn/problems/copy-list-with-random-pointer/">随机链表的复制</a></h1><ol>
<li>如果没有random指针，是很好处理的，只需要遍历一遍原链表，顺路建立新链表就行</li>
<li>但是有了random链表，需要遍历两次，多加的一次负责设置random指针。因为有的random指针指向的东西在第一次遍历时还没建立到</li>
<li>使用一个哈希表mappimg &#x3D; { } 来建立原节点与新节点的映射</li>
</ol>
<h1 id="Day12-排序链表"><a href="#Day12-排序链表" class="headerlink" title="Day12 排序链表"></a>Day12 <a href="https://leetcode.cn/problems/sort-list/">排序链表</a></h1><ol>
<li>使用归并排序</li>
<li>设置出口：只有1个或者0个元素</li>
<li>使用快慢指针将链表从中点分开：<ol>
<li>slow初始化为head，fast初始化为head.next</li>
<li>while fast and fast.next</li>
<li>最终slow会只向中点前一个（偶数）或者中点（奇数）</li>
<li>将slow.next &#x3D; None</li>
</ol>
</li>
<li>分开后左右两个链表分别做递归排序，然后创建一个新链表，将这两个升序链表做合并</li>
<li>合并时创建一个新的链表dummy节点，然后往后串：每次指向较小的那个节点</li>
<li>最后要返回dummy.next，因为这才是我们合并完的新表头</li>
</ol>
<p>&#x3D;&#x3D;二叉树&#x3D;&#x3D;</p>
<h1 id="Day14-二叉树的中序遍历"><a href="#Day14-二叉树的中序遍历" class="headerlink" title="Day14 二叉树的中序遍历"></a>Day14 <a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">二叉树的中序遍历</a></h1><ol>
<li>定义一个函数 inorderTraverse，然后递归调用他，为什么不用题目给的本身的函数调用？因为他的返回值是一个list，而我们的函数不需要返回，只需要把list传进去，然后修改result就行</li>
<li>在递归的那个函数中，就是调用自己的左递归，然后visit中间节点，然后右递归</li>
</ol>
<h1 id="Day14-二叉树的最大深度"><a href="#Day14-二叉树的最大深度" class="headerlink" title="Day14 二叉树的最大深度"></a>Day14 <a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></h1><ol>
<li>以当前节点为树的最大深度 &#x3D; 1 + max(左树深度，右树深度)</li>
<li>Python 不可变变量传参，无法引用传递，只能值传递</li>
</ol>
<h1 id="Day15-翻转二叉树"><a href="#Day15-翻转二叉树" class="headerlink" title="Day15 翻转二叉树"></a>Day15 <a href="https://leetcode.cn/problems/invert-binary-tree/">翻转二叉树</a></h1><ol>
<li>左，右子树分别做翻转</li>
<li>左节点和右节点的指针交换</li>
</ol>
<h1 id="Day15-对称二叉树"><a href="#Day15-对称二叉树" class="headerlink" title="Day15 对称二叉树"></a>Day15 <a href="https://leetcode.cn/problems/symmetric-tree/">对称二叉树</a></h1><ol>
<li>使用一个辅助函数判断两棵树是否镜像：<ol>
<li>根节点相等</li>
<li>node1.左 isMirror node2.右</li>
<li>node1.右 isMirror node1.左</li>
</ol>
</li>
</ol>
<h1 id="Day16-二叉树的直径"><a href="#Day16-二叉树的直径" class="headerlink" title="Day16 二叉树的直径"></a>Day16 <a href="https://leetcode.cn/problems/diameter-of-binary-tree/">二叉树的直径</a></h1><ol>
<li>二叉树的深度的升级版：</li>
<li>对于以每一个节点为转折点的所有子树中，最大的直径就是左子树的深度 + 右子树的深度</li>
<li>所以只要在求深度（后序遍历）的过程中，顺带更新一下这个最大值就好</li>
<li>因为求深度函数返回的是深度，而本题函数要返回的是最大直径，因此需要用一个辅助函数来递归</li>
</ol>
<h1 id="Day16-二叉树的层序遍历"><a href="#Day16-二叉树的层序遍历" class="headerlink" title="Day16 二叉树的层序遍历"></a>Day16 <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">二叉树的层序遍历</a></h1><ol>
<li>每pop一个，就把它的左右节点加到队列里。这样孩子的孩子的遍历次序就会集成他们parent的地位。而由于每次只加2个直系的孩子，所以不会导致像递归那样一条路走到底</li>
<li>由于层和层的结果要区分开，所以在while里面还需要一个for来控制取出几个，而每一层将要开始时，队列里面有几个元素，就是这一层有几个</li>
<li>注意ans数组里面放的是node.val而非node</li>
</ol>
<h1 id="Day17-将有序数组转换为二叉搜索树"><a href="#Day17-将有序数组转换为二叉搜索树" class="headerlink" title="Day17 将有序数组转换为二叉搜索树"></a>Day17 <a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">将有序数组转换为二叉搜索树</a></h1><ol>
<li>平衡二叉搜索树：左子树的值&lt;根节点&lt;右子树</li>
<li>递归构建子树：root &#x3D; nums[ (left + right) &#x2F;&#x2F; 2]，返回构建完的子树的root，接受left和right作为索引，而不是传递数组的切片拷贝。</li>
<li>每次在调用的时候传递left 和 right参数</li>
<li>取数组中点：mid &#x3D; (left + right) &#x2F;&#x2F; 2</li>
</ol>
<h1 id="Day18-验证二叉搜索树"><a href="#Day18-验证二叉搜索树" class="headerlink" title="Day18 验证二叉搜索树"></a>Day18 <a href="https://leetcode.cn/problems/validate-binary-search-tree/">验证二叉搜索树</a></h1><ol>
<li>思考方式：从上往下思考：根节点的值会将左右子树的范围一分为二，左子树必须小于root，但是不能太小，因为root这个子树本身也有一个上下界</li>
<li>新建一个递归函数，接受 lower 和 upper， 先对root.val判断在不在这个界限里，然后根据root.val对左右子树的范围做进一步的切分。</li>
</ol>
<h1 id="Day19-二叉搜索树中第-K-小的元素"><a href="#Day19-二叉搜索树中第-K-小的元素" class="headerlink" title="Day19 二叉搜索树中第 K 小的元素"></a>Day19 <a href="https://leetcode.cn/problems/kth-smallest-element-in-a-bst/">二叉搜索树中第 K 小的元素</a></h1><ol>
<li>BST中序遍历后一定得到一个从小排到大的数组</li>
<li>取出第k-1个元素，就是第k小的元素</li>
</ol>
<h1 id="Day20-二叉树的右视图"><a href="#Day20-二叉树的右视图" class="headerlink" title="Day20 二叉树的右视图"></a>Day20 <a href="https://leetcode.cn/problems/binary-tree-right-side-view/">二叉树的右视图</a></h1><ol>
<li>就是层序遍历，每一层的最后一个结果加入ans就行</li>
<li>注意deque的pop是栈，想要队列需要popleft()</li>
<li>for循环内部 dq在变化，所以需要提前备份len，来判断是否循环到了当前层最后一个</li>
</ol>
<h1 id="Day27-从前序与中序遍历序列构造二叉树"><a href="#Day27-从前序与中序遍历序列构造二叉树" class="headerlink" title="Day27 从前序与中序遍历序列构造二叉树"></a>Day27 <a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">从前序与中序遍历序列构造二叉树</a></h1><ol>
<li>依次从先序里面取节点，取出来的都是根，因为先序总是先visit根，因此先序的顺序就是子树构建的顺序</li>
<li>使用一个self.preorder-index来维护先序的指针</li>
<li>然后在中序中使用list.index(val, left, right+1)找到根，划分出新的左右边界，递归地根据新的inorder的数组来构建相应的子树</li>
</ol>
<h1 id="Day27-路径总和-III"><a href="#Day27-路径总和-III" class="headerlink" title="Day27 路径总和 III"></a>Day27 <a href="https://leetcode.cn/problems/path-sum-iii/">路径总和 III</a></h1><ol>
<li>先先序遍历这颗树，对于每一个根节点，调用辅助函数countFromRoot算出以此根节点往下出发的等于target的次数</li>
<li>辅助函数负责计算所有以自己为root的路径中，值等于target的条数。target把root.val减掉之后，递归地调用左右子树，等价于以左右子树为根节点，但是target减少的路径</li>
</ol>
<h1 id="Day28-70-爬楼梯"><a href="#Day28-70-爬楼梯" class="headerlink" title="Day28 70. 爬楼梯"></a>Day28 <a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h1><ol>
<li>法1：直接用递归来实现dp，但是需要使用@functools.lru_cache（maximize&#x3D;None）来实现对函数输出的记忆字典改造</li>
<li>法2：先创建一个大小为n的数组，你的任务就是填完所有格子</li>
</ol>
<h1 id="Day28-118-杨辉三角"><a href="#Day28-118-杨辉三角" class="headerlink" title="Day28 118. 杨辉三角"></a>Day28 <a href="https://leetcode.cn/problems/pascals-triangle/">118. 杨辉三角</a></h1><ol>
<li>吸取那个BSF打印二叉树的思想，外层for用来遍历行</li>
<li>然后内层for中，新建一个row列表，然后这一轮结束后，把这个列表再插入到二维列表中</li>
<li>注意在递推中，虽然外层for用的是1,2,3这样来遍历，但是实际append到数组里是0,1,2行，因此二维数组的下标要注意是-2。用来补偿我们人工123计数和实际上列表中012计数的差异，否则会index out of range</li>
</ol>
<h1 id="Day29-打家劫舍"><a href="#Day29-打家劫舍" class="headerlink" title="Day29 打家劫舍"></a>Day29 <a href="https://leetcode.cn/problems/house-robber/">打家劫舍</a></h1><ol>
<li>dp的本质需要调用上一次自己函数的结果，所以首要目的是看清函数本身返回的是什么。对于本题，返回的结果的意义是：打劫<strong>到</strong>第 i 间房的总收益。注意到 是 “到”。说明这间房不一定会被打劫，只是访问到。因此就会引出一个问题，这间房打劫还是不打劫：如果打劫，就是这间房的收益 + dp[i - 2]。如果不打劫，就是dp[i - 1]，注意这2者只能二选一，选择最优解，因此用max连接。</li>
</ol>
<h1 id="Day29-完全平方数"><a href="#Day29-完全平方数" class="headerlink" title="Day29 完全平方数"></a>Day29 <a href="https://leetcode.cn/problems/perfect-squares/">完全平方数</a></h1><ol>
<li>这道题dp[i]的含义是 i最少能被多少个完全平方数的和所表示，那么我们想要求dp[i]，肯定要想方设法使用dp前面的信息。我们思考所有能到达dp[i]的路径：枚举所有小于i的完全平方数j * j，假设dp[i]里包含了他，那么他的最优解就是dp[i - j * j] + 1，再对所有局部路径求min，得到全局最优解</li>
</ol>
<h1 id="Day30-零钱兑换"><a href="#Day30-零钱兑换" class="headerlink" title="Day30 零钱兑换"></a>Day30 <a href="https://leetcode.cn/problems/coin-change/">零钱兑换</a></h1><ol>
<li>这道题和完全平方数一样，假设用了这个硬币，那就把他减掉，然后1+dp[i-coin]。但是区别在于，这题中有的dp slot可能是不存在的，因此使用floa(‘inf)表示，即使-1了还是不变，并不影响我们取min，这样方便一点<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        dp = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (amount + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, amount + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> coin &lt;= amount:</span><br><span class="line"></span><br><span class="line">                        dp[i] = <span class="built_in">min</span>(dp[i - coin] + <span class="number">1</span>, dp[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[amount] <span class="keyword">if</span> dp[amount] != <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Day30单词拆分"><a href="#Day30单词拆分" class="headerlink" title="Day30单词拆分"></a>Day30<a href="https://leetcode.cn/problems/word-break/">单词拆分</a></h1><ol>
<li>虽然变成了字符串，但还是要从前往后把子串拿出来。dp[i]的意义是s的第i位截止的单词是否符合题意。这样直到迭代到dp[n]。再用j去从Window中截取最后一个单词出来。</li>
<li>转移方程：最后一个单词在list中 &amp;&amp; dp前面那个单词是True<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">        dp = [<span class="literal">False</span>] * (n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            window = s[:i]</span><br><span class="line"></span><br><span class="line">            window_length = <span class="built_in">len</span>(window)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,window_length+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">                post = window[-j:]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> dp[i-j] <span class="keyword">and</span> post <span class="keyword">in</span> wordDict:</span><br><span class="line"></span><br><span class="line">                    dp[i] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Day30-最长递增子序列"><a href="#Day30-最长递增子序列" class="headerlink" title="Day30 最长递增子序列"></a>Day30 <a href="https://leetcode.cn/problems/longest-increasing-subsequence/">最长递增子序列</a></h1><ol>
<li>这题dp[i]的意义是，以第i-1个下标结尾的串，他的最长序列是多少。注意与前面不同的是：必须要以这个结尾（包含这个char），如果不以他结尾而取了前面别人的最大值，会导致后面与它大小判断的错误。</li>
<li>因为这个题的转移方程是：遍历前面所有的dp[j]，如果这个nums[i] &gt;nums[j]，说明i可以跟在j后面，因此才能继承j的dp值。</li>
<li>由于dp[i]后面可能会小于前面，并不是对前面整体取max，所以最后return的时候要return max(dp)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLIS</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">1</span>] * (n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> nums[i] &gt; nums[j]:</span><br><span class="line"></span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Day31-乘积最大子数组（不熟）"><a href="#Day31-乘积最大子数组（不熟）" class="headerlink" title="Day31 乘积最大子数组（不熟）"></a>Day31 <a href="https://leetcode.cn/problems/maximum-product-subarray/">乘积最大子数组</a>（不熟）</h1><ol>
<li>原先的想法是维护两个 dp 数组，一个正数，一个负数</li>
<li>Gemini 提出了 O1 空间的解法：维护 max_so_far和min_so_far，意义是以上一个结尾的最大值。</li>
<li>遍历数组，每一个 nums[i]都要决定：max_so_far和 min 是要以自己开始，还是作为乘积接在上一个子数组后面</li>
<li>每一次遍历都要维护全局最大值 result<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">maxProduct</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">	</span><br><span class="line">	max_so_far = min_so_far = nums[<span class="number">0</span>]</span><br><span class="line">	</span><br><span class="line">	n = <span class="built_in">len</span>(nums)</span><br><span class="line">	</span><br><span class="line">	result = max_so_far</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">	</span><br><span class="line">	tmp_max_so_far = <span class="built_in">max</span>(nums[i], nums[i]*max_so_far, nums[i]*min_so_far)</span><br><span class="line">	</span><br><span class="line">	min_so_far = <span class="built_in">min</span>(nums[i], nums[i]*max_so_far, nums[i]*min_so_far)</span><br><span class="line">	</span><br><span class="line">	max_so_far = tmp_max_so_far</span><br><span class="line">	</span><br><span class="line">	result = <span class="built_in">max</span>(result, max_so_far)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>算法题</category>
      </categories>
  </entry>
  <entry>
    <title>做饭日记</title>
    <url>/2025/09/05/food/%E5%81%9A%E9%A5%AD%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="（图片加载较慢）"><a href="#（图片加载较慢）" class="headerlink" title="（图片加载较慢）"></a>（图片加载较慢）</h1><h3 id="香煎照烧鸡胸肉"><a href="#香煎照烧鸡胸肉" class="headerlink" title="香煎照烧鸡胸肉"></a>香煎照烧鸡胸肉</h3><p>鸡胸肉加入淀粉煎制，比直接煎强。但是酱汁太淡了</p>
<p><img src="/../../images/IMG_9459(1).jpg"></p>
<h3 id="番茄滑蛋牛肉"><a href="#番茄滑蛋牛肉" class="headerlink" title="番茄滑蛋牛肉"></a>番茄滑蛋牛肉</h3><p>老问题，番茄没有番茄味<br><img src="/../../images/IMG_9375%201.jpg"></p>
<p><img src="/../../images/IMG_9451.jpg"></p>
<h3 id="上汤西兰花"><a href="#上汤西兰花" class="headerlink" title="上汤西兰花"></a>上汤西兰花</h3><p>好吃的，下次多搞点咸鸭蛋黄<br><img src="/../../images/IMG_9375.jpg"></p>
<h3 id="法式白汁"><a href="#法式白汁" class="headerlink" title="法式白汁"></a>法式白汁</h3><p>大失败，葡萄酒放太多了<br><img src="/../../images/IMG_9064.jpg"></p>
<h3 id="香菜牛肉意面"><a href="#香菜牛肉意面" class="headerlink" title="香菜牛肉意面"></a>香菜牛肉意面</h3><p>牛肉汤做啥都香<br><img src="/../../images/IMG_9015.jpg"></p>
<h3 id="牛排5-0"><a href="#牛排5-0" class="headerlink" title="牛排5.0"></a>牛排5.0</h3><p>稳定发挥，没啥说的<br><img src="/../../images/IMG_8813(1).jpg"></p>
<h3 id="大杂烩饺子"><a href="#大杂烩饺子" class="headerlink" title="大杂烩饺子"></a>大杂烩饺子</h3><p>饺子吃不完了<br><img src="/../../images/IMG_8516.jpg"></p>
<h3 id="鸡胸肉配金枪鱼排"><a href="#鸡胸肉配金枪鱼排" class="headerlink" title="鸡胸肉配金枪鱼排"></a>鸡胸肉配金枪鱼排</h3><p>这个金枪鱼疑似是大豆蛋白做的<br><img src="/../../images/IMG_8507(1).jpg"></p>
<h3 id="中西意面"><a href="#中西意面" class="headerlink" title="中西意面"></a>中西意面</h3><p>主打有啥放啥<br><img src="/../../images/IMG_8465.jpg"></p>
<h3 id="避风塘炒蟹"><a href="#避风塘炒蟹" class="headerlink" title="避风塘炒蟹"></a>避风塘炒蟹</h3><p>这个避风塘炒料太咸了。。<br><img src="/../../images/IMG_8457.jpg"></p>
<h3 id="水波蛋"><a href="#水波蛋" class="headerlink" title="水波蛋"></a>水波蛋</h3><p>半夜猪瘾犯了。空气炸锅130度13分钟，完美的流心。</p>
<p><img src="/../../images/IMG_8143(2).jpg"></p>
<h3 id="Lasgna"><a href="#Lasgna" class="headerlink" title="Lasgna"></a>Lasgna</h3><p>哦一西。但是里面汤汁过多。疑似意面没有控干水，以及番茄等内部蔬菜受热水蒸气被芝士阻挡无法蒸发。<br><img src="/../../images/IMG_8133(1).jpg"></p>
<p><img src="/../../images/IMG_8137.jpg"></p>
<h3 id="牛排4-0"><a href="#牛排4-0" class="headerlink" title="牛排4.0"></a>牛排4.0</h3><p>比上次偏老。但是这次摆盘好看<br><img src="/../../images/IMG_8127.jpg"></p>
<h3 id="牛排3-0"><a href="#牛排3-0" class="headerlink" title="牛排3.0"></a>牛排3.0</h3><p>完美的七分熟。芦笋根部偏老<br><img src="/../../images/IMG_8045(1).jpg"></p>
<h3 id="奶油蘑菇汤"><a href="#奶油蘑菇汤" class="headerlink" title="奶油蘑菇汤"></a>奶油蘑菇汤</h3><p>伟大无需多言<img src="/../../images/IMG_8015(1).jpg"></p>
<h3 id="奶汁烩红对虾"><a href="#奶汁烩红对虾" class="headerlink" title="奶汁烩红对虾"></a>奶汁烩红对虾</h3><p>我那么大一只虾做完之后就这么点？</p>
<p><img src="/../../images/IMG_8001(1).jpg"></p>
<h3 id="番茄意面"><a href="#番茄意面" class="headerlink" title="番茄意面"></a>番茄意面</h3><p>番茄味不够，下次改用番茄罐头<br><img src="/../../images/IMG_7918.jpg"></p>
<h3 id="牛排2-0"><a href="#牛排2-0" class="headerlink" title="牛排2.0"></a>牛排2.0</h3><p>换铸铁锅。每面1min，外侧全熟而内侧raw。<br><img src="/../../images/IMG_7907(2).jpg"></p>
<p><img src="/../../images/IMG_7909(2).jpg"></p>
<h3 id="牛排1-0"><a href="#牛排1-0" class="headerlink" title="牛排1.0"></a>牛排1.0</h3><p>全熟，极难咀嚼。每面超过3min</p>
<p><img src="/../../images/IMG_7902.jpg"></p>
<h3 id="响油鳝丝1-0"><a href="#响油鳝丝1-0" class="headerlink" title="响油鳝丝1.0"></a>响油鳝丝1.0</h3><p>神中神，下次记得买大而粗的鳝丝，口感更佳<img src="/../../images/IMG_7901.jpg"></p>
]]></content>
      <categories>
        <category>做饭</category>
      </categories>
  </entry>
</search>
