<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>template</title>
    <url>/2025/09/05/template/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Leetcode（连载中）</title>
    <url>/2025/09/05/lc/Leetcode%EF%BC%88%E8%BF%9E%E8%BD%BD%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<p>&#x3D;&#x3D;哈希&#x3D;&#x3D;</p>
<h1 id="Day1-字母异位词分组"><a href="#Day1-字母异位词分组" class="headerlink" title="Day1  字母异位词分组"></a>Day1  <a href="https://leetcode.cn/problems/group-anagrams/">字母异位词分组</a></h1><ol>
<li>sorted(一个string)返回的结果是一个列表，把单词的每个字母排序构成，因此需要使用 “”.join(这个列表) 把他们重新拼会字符串</li>
<li>  mp &#x3D; collections.defaultdict(list)，比起普通的字典，在初次遇到一个key的时候，会自动创建一个默认值</li>
<li>defauldict(必须提供参数，作为默认值)</li>
<li>dict.values()返回的是一个视图，必须list（）来显示转化为list</li>
</ol>
<h1 id="Day4-两数之和"><a href="#Day4-两数之和" class="headerlink" title="Day4 [两数之和]"></a>Day4 [两数之和]</h1><ol>
<li>这道题目要求返回的是下标，因此不能用排序+双指针</li>
<li>一边遍历nums一遍插入哈希表(这样比起先一下子建好哈希表，可以避免重复取2次自己），以num作为key，index作为v</li>
<li>每次遍历的时候顺便看看target - num在不在哈希表里</li>
<li>enumerate(nums) 可以直接获得 index， num</li>
<li>先查找，后插入</li>
</ol>
<h1 id="Day2-最长连续序列"><a href="#Day2-最长连续序列" class="headerlink" title="Day2  最长连续序列"></a>Day2  <a href="https://leetcode.cn/problems/longest-consecutive-sequence/">最长连续序列</a></h1><ol>
<li>使用set，即cpp中的unordered_set，这也是哈希表。通过in可以判断元素是否在哈希表中命中</li>
<li>贪心思想：如果这个数在数组里，那么一直判断他+1是否还在，直到不在</li>
<li>节省不必要的判断： 如果x在，那么x+1的最长序列肯定干不过x，因此只要判断x在，那么x+1直接跳过</li>
<li>dict和set底层都是哈希表，哈希表对key进行hash（），定位到内存中的桶。不同的是：dict的桶里面存放了完整的k-v，而set里面只存放了key本身。因此dict适合用来做映射，set适合用来做定位。</li>
</ol>
<p>&#x3D;&#x3D;&#x3D;数组&#x3D;&#x3D;</p>
<h1 id="Day3-最大子数组和"><a href="#Day3-最大子数组和" class="headerlink" title="Day3 最大子数组和"></a>Day3 <a href="https://leetcode.cn/problems/maximum-subarray/">最大子数组和</a></h1><ol>
<li>局部最优和全局最优：设置一个cur，largest，每次比较cur是否超过largest</li>
<li>有效前缀：如果前面一个子数组的sum＞0，才是有效的，否则是累赘，后面再怎么捞也不如不加</li>
<li>着眼点要放在每一个元素上，考虑这个元素应该加入前面的数组还是自立门户</li>
<li>dp子问题：以nums[i]结尾的子数组，找出其中最大的：对于这样的子数组，要么就是一个nums[i]，要么还会吸纳前面的dp[i-1]，所以求出dp[i]依赖于dp[i-1]的答案，就有了状态方程</li>
<li>这种“<strong>当前问题的最优解，可以由子问题的最优解推导出来</strong>”的特性，就是<strong>最优子结构</strong>。</li>
</ol>
<h1 id="Day3-轮转数组"><a href="#Day3-轮转数组" class="headerlink" title="Day3 轮转数组"></a>Day3 <a href="https://leetcode.cn/problems/rotate-array/">轮转数组</a></h1><ol>
<li>nums[:] 是对列表的原地修改</li>
<li>nums[-k:]是取出后k个元素</li>
<li>nums[::-1]是反转</li>
<li>Python函数传参 传的是 对象的引用，因此如果对原来的变量名进行reassign，那么其实会新开一块内存，而非原地修改</li>
<li>轮转 k 次等于轮转 k % n 次</li>
</ol>
<h1 id="Day3-合并区间"><a href="#Day3-合并区间" class="headerlink" title="Day3 合并区间"></a>Day3 <a href="https://leetcode.cn/problems/merge-intervals/">合并区间</a></h1><ol>
<li> intervals.sort(key &#x3D; lambda x: x[0])，按照特定规则排序</li>
<li>先将区间的第一个元素进行排序，然后利用栈，每进来一个都看看能不能合成大西瓜</li>
<li>for i in intervals[1:] 可以略过第一个元素遍历后面的（适用于第一个元素单独处理的情况）wosh</li>
</ol>
<h1 id="Day4-除自身以外数组的乘积"><a href="#Day4-除自身以外数组的乘积" class="headerlink" title="Day4 除自身以外数组的乘积"></a>Day4 <a href="https://leetcode.cn/problems/product-of-array-except-self/">除自身以外数组的乘积</a></h1><ol>
<li>range(start, stop, step)用来像cpp那样从后往前遍历元素</li>
<li>for num in reversed(nums)也可以倒着取元素，而且reversed返回的是迭代器，不占空间</li>
<li>i的后缀等于i+1的后缀 * i+1</li>
<li>题目的提示可能会给提示</li>
<li>Python通过 suffix &#x3D; [0] * n， 预先填0可以实现预分配空间</li>
</ol>
<h1 id="Day4-缺失的第一个正数"><a href="#Day4-缺失的第一个正数" class="headerlink" title="Day4 缺失的第一个正数"></a>Day4 <a href="https://leetcode.cn/problems/first-missing-positive/">缺失的第一个正数</a></h1><ol>
<li>长度为n的数组，最好的情况也就是1到n排满，那么第一个缺失的正数就是n+1</li>
<li>所以如果里面有不是1 - n 的数，那么 1 - n 之间一定有空缺的数</li>
<li>原地哈希：让每个数排到自己值的序号上，这样就建立了 1一定在索引为1的位置上，2一定在索引为2的位置上，这样谁的位置的空缺的就一目了然了</li>
<li>通过不断交换两个数，最终实现所有数都在自己的位置上，需要一个while循环，每个数最多被交换一遍，因此On</li>
<li>Python中交换两个数不需要swap，a, b &#x3D; b, a</li>
</ol>
<p>&#x3D;&#x3D;双指针&#x3D;&#x3D;&#x3D;</p>
<h1 id="Day4-移动零"><a href="#Day4-移动零" class="headerlink" title="Day4 移动零"></a>Day4 <a href="https://leetcode.cn/problems/move-zeroes/">移动零</a></h1><ol>
<li>双指针可以原地修改，top指向下一个被覆盖的元素，cur指向下一个遍历到进行处理的元素</li>
</ol>
<h1 id="Day4-盛最多水的容器"><a href="#Day4-盛最多水的容器" class="headerlink" title="Day4 盛最多水的容器"></a>Day4 <a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a></h1><ol>
<li>对于这种左右对称，要遍历C(n,2)种情况的，不妨设想两个指针分别从两边往里移动，此时是可以覆盖所有C(n,2)的</li>
<li>指针位于两端的时候，width肯定是最大的，那么往里移动，width必然减小，所以height必须要增大</li>
<li>开始考虑剪枝：如果左边的板子是矮的，那么肯定要移动左边的板子才有可能变大。右边同理</li>
<li>这样左边走一点，右边走一点，可以排除不可能成为最大值的那些组合，因为那些组合肯定还干不过现在的组合。从而转化为线性扫描的问题。</li>
</ol>
<h1 id="Day4-三数之和"><a href="#Day4-三数之和" class="headerlink" title="Day4 三数之和"></a>Day4 <a href="https://leetcode.cn/problems/3sum/">三数之和</a></h1><ol>
<li>由于题目要求答案中不可以包含重复的三元组：不妨设，我们的答案中的三个数字分别是从小到大排序。那么如果我们先对整个数组排序，然后主循环第一个后，后面两个都在后面再找，那么我们找到的三元组的结构一定符合i&lt;&#x3D;j&lt;&#x3D;k</li>
<li>可以使用set去重，然后使用列表推导式[list(item) for item in my_set]将set里面的tuple再次转化回list，因为set里面要求是不可变元素</li>
<li>固定第一个元素，将其转化为两数之和为target的题目</li>
<li>为什么双指针不能回头：因为双指针每次只能走一步，那么回头的情况，之前肯定已经处理过了</li>
</ol>
<p>&#x3D;&#x3D;滑动窗口 &#x3D;&#x3D;</p>
<h1 id="Day5-无重复字符的最长子串"><a href="#Day5-无重复字符的最长子串" class="headerlink" title="Day5 无重复字符的最长子串"></a>Day5 <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h1><ol>
<li>滑动窗口的l和r都向前蠕动，向毛毛虫那样</li>
<li>先试图扩张右边，如果受阻，则扩张左边</li>
<li>这道题其实可以用散列表记录当前子串各个字母的下标，如果右边遇到了重复的，则左边边界可以直接移动到重复的之后</li>
<li>set可以使用add和remove，不需要每次都建立一个set</li>
<li>l &#x3D; 0 和 r &#x3D; 0的定义分开写</li>
</ol>
<h1 id="Day5-找到字符串中所有字母异位词"><a href="#Day5-找到字符串中所有字母异位词" class="headerlink" title="Day5 找到字符串中所有字母异位词"></a>Day5 <a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">找到字符串中所有字母异位词</a></h1><ol>
<li>x.sorted()是原地排序</li>
<li>sorted(x)是返回一个排序完的列表</li>
<li>reversed(x)返回的是迭代器</li>
<li>朴素思路：拿一个固定窗口去滑，通过sort对比是否一样</li>
<li>强化思路：用哈希表存当前子串中每个字母的数量，通过数量是否一致来进行比对。但是注意哈希表的key一开始就要包含了26个字母，否则会判定为哈希表不想等。因此要使用字典推导式来初始化含有26个字母的哈希表：{char: 0  for char in ascii.lowercase}</li>
<li>string.ascii_lowercase 提供了字符串 “abcdefghijklmnopqrstuvwxyz” # 使用字典推导式来创建字典 char_counts &#x3D; {char: 0 for char in string.ascii_lowercase}</li>
</ol>
<p>&#x3D;&#x3D;子串&#x3D;&#x3D; ： 前缀和 -  前缀和</p>
<h1 id="Day5-和为-K-的子数组"><a href="#Day5-和为-K-的子数组" class="headerlink" title="Day5 和为 K 的子数组"></a>Day5 <a href="https://leetcode.cn/problems/subarray-sum-equals-k/">和为 K 的子数组</a></h1><ol>
<li>任意一个子串的和可以表示为后面到0的和 - 前面到0的和，即sumj-sumi&#x3D;k,这就转化成了一个[[两数之和]]的题目。而两数之和可以转化成哈希表中查找一个数是否存在，因此对于任意一个sumj，希望能找到一个sumi &#x3D; sumj - k。</li>
<li>对于两数之和，需要先查找，后插入</li>
<li>特殊：对于从开头开始，且本身sum就是k的子串，由于我们希望在哈希表中找到一个sum前，现在sum后-k &#x3D; sum前。但是由于我们对于第一个数组并没有sum前，因此人为设置一个freq[0]&#x3D;1。当然也可以直接遍历这个哈希表，看看有没有key&#x3D;k的。但是前缀和问题先初始化 <code>&#123;0: 1&#125;</code>” 已经成为了解决此类问题的一个<strong>标准范式 (Standard Paradigm)</strong></li>
</ol>
<h1 id="Day8-滑动窗口最大值"><a href="#Day8-滑动窗口最大值" class="headerlink" title="Day8 滑动窗口最大值"></a>Day8 <a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h1><p>&#x3D;&#x3D;单调队列&#x3D;&#x3D;</p>
<ol>
<li>以nums[i]，nums[j]为首尾的窗口的长度为 j - i + 1</li>
<li>双端队列 collections.deque()<ol>
<li>pop()</li>
<li>q.append()</li>
<li>popleft()</li>
</ol>
</li>
<li>遍历下标和值：for i, k in enumerate(nums):</li>
<li> while q and nums[q[-1]] &lt; nums[i]: 判断q非空，可以避免在第一次里面还没有元素的时候，由于访问不了下标而报错，无法插入元素</li>
<li>单调队列：如果你的元素在前面，还没有后面的大，那么永远无法成为最大元素的可能了，因为后面比你年轻的还比你强</li>
<li>单调队列大致分为3个操作: 入，出，获得最大值。入的话，需要把前面比自己大的元素全部pop掉，这样每次排在自己前面的只可能是比自己大的</li>
<li>出:由于有的元素可能由于无法维持单调性已经被pop了，因此通过下标的计算来判断这个队头是否应该在窗口里，如果还在，说明应该被pop的其实早就被干掉了，所以这一轮无需操作</li>
<li>我们最外层遍历的是新加入窗口的元素，因此for遍历到len(nums)就行。</li>
<li>在ans.append时，由于前几个还没到窗口的大小，因此不该作为答案添加，因此要在append前加入一个if判断，里面下标的计算带一个数试一下就知道怎么设置了</li>
</ol>
<h1 id="Day8-矩阵置零"><a href="#Day8-矩阵置零" class="headerlink" title="Day8 矩阵置零"></a>Day8 <a href="https://leetcode.cn/problems/set-matrix-zeroes/">矩阵置零</a></h1><ol>
<li>超简单，第一次一分钟做完。分2次遍历矩阵，第一次记录所有0的行和列，用set实现快速查找。第二次再把这些行列的元素全部置0就好</li>
</ol>
<h1 id="Day8-螺旋矩阵"><a href="#Day8-螺旋矩阵" class="headerlink" title="Day8 螺旋矩阵"></a>Day8 <a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></h1><ol>
<li>采用模拟的方法，每次都遍历一遍最外圈一层</li>
<li>设置4个边界 top bottom left right，每遍历完一层之后，边界就收缩</li>
<li>当两个边界错位后，停止</li>
<li>最后两个条的遍历，即从右往左 和 从下往上的遍历前，需要额外判断边界是否已经越界，因为前两次已经更改了边界，但是大while循环里是四次才判断一次</li>
</ol>
<h1 id="Day9-旋转图像"><a href="#Day9-旋转图像" class="headerlink" title="Day9  旋转图像"></a>Day9  <a href="https://leetcode.cn/problems/rotate-image/">旋转图像</a></h1><ol>
<li>数学可证：顺时针旋转90°&#x3D;&#x3D; 对角线翻转 + 左右对称</li>
<li>左右对称可以使用Python内置的数组.reverse</li>
<li>Python 排序与翻转方法总结</li>
</ol>
<table>
<thead>
<tr>
<th>操作</th>
<th>语法 (<code>Syntax</code>)</th>
<th>作用</th>
<th>是否修改原始对象？</th>
<th>返回值 (<code>Return Value</code>)</th>
</tr>
</thead>
<tbody><tr>
<td><strong>排序 (Sorted)</strong></td>
<td><code>sorted(iterable)</code></td>
<td>对任何可迭代对象进行排序，并<strong>返回一个新列表</strong>。</td>
<td><strong>否</strong></td>
<td>一个<strong>新的、排好序的列表 (<code>list</code>)</strong></td>
</tr>
<tr>
<td><strong>排序 (Sort)</strong></td>
<td><code>my_list.sort()</code></td>
<td><strong>原地</strong>对一个列表进行排序。</td>
<td><strong>是</strong></td>
<td><strong><code>None</code></strong></td>
</tr>
<tr>
<td><strong>翻转 (Reversed)</strong></td>
<td><code>reversed(sequence)</code></td>
<td>返回一个可以倒序遍历序列的<strong>迭代器</strong>。</td>
<td><strong>否</strong></td>
<td>一个<strong>反向迭代器 (<code>iterator</code>)</strong></td>
</tr>
<tr>
<td><strong>翻转 (Reverse)</strong></td>
<td><code>my_list.reverse()</code></td>
<td><strong>原地</strong>翻转一个列表。</td>
<td><strong>是</strong></td>
<td><strong><code>None</code></strong></td>
</tr>
</tbody></table>
<h1 id="Day9-搜索二维矩阵-II"><a href="#Day9-搜索二维矩阵-II" class="headerlink" title="Day9 搜索二维矩阵 II"></a>Day9 <a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">搜索二维矩阵 II</a></h1><ol>
<li>起始点要选取在右上角，这样如果想变小，只能往左走，要变大只能往下走，确定</li>
<li>当坐标超出边界后终止while循环</li>
</ol>
<p>&#x3D;&#x3D;链表&#x3D;&#x3D;</p>
<h1 id="Day9-相交链表"><a href="#Day9-相交链表" class="headerlink" title="Day9 相交链表"></a>Day9 <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">相交链表</a></h1><ol>
<li><p>Optional[ListNode] 表示这个变量要么是空要么是ListNode类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line"></span><br><span class="line">         <span class="variable language_">self</span>.val = x</span><br><span class="line"></span><br><span class="line">         <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python没有指针，因此直接引用 来代替 指针，引用就是变量名。所以看起来好像是把下一个节点包含在自己体内了</p>
</li>
<li><p>变量名就是引用，变量名.next就是下一个元素引用的本身</p>
</li>
<li><p>先把一条链的所有引用存到set里面，再遍历第二条链，如果存在，那么就说明这是公共节点</p>
</li>
<li><p>把一个变量（引用）存到set里的过程：根据a指向的id，计算hash(id)，然后创建了一个新的引用，把这个新引用存进去</p>
</li>
</ol>
<h1 id="Day9-反转链表"><a href="#Day9-反转链表" class="headerlink" title="Day9 反转链表"></a>Day9 <a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></h1><ol>
<li>两个移动主指针，pre和cur</li>
<li>初始化：pre是None，cur是head，这样能保证不需要任何特殊处理</li>
<li>每次修改cur的指针，修改前需要备份cur.next</li>
<li>修改后，pre移到cur，cur移到备份</li>
</ol>
<h1 id="Day9-回文链表"><a href="#Day9-回文链表" class="headerlink" title="Day9 回文链表"></a>Day9 <a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a></h1><ol>
<li>通过return nums[::-1] &#x3D;&#x3D; nums 直接返回bool，不用再if return True了 </li>
<li>也可以用快慢指针来做</li>
</ol>
<h1 id="Day9-环形链表"><a href="#Day9-环形链表" class="headerlink" title="Day9 环形链表"></a>Day9 <a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></h1><ol>
<li>和前面那个查找两个链表有没有相同元素一样，记录已经遍历过的节点，一旦有重复，就说明有环</li>
<li>进阶：快慢指针（龟兔赛跑）：慢指针step&#x3D;1，快指针step&#x3D;2。当慢指针第一次进入环时，快指针相对于慢指针的速度就是1，所以肯定可以追上</li>
<li>快慢指针：slow初始化为head，fast初始化为head.next。注意如果next或者next.next调用前，都要判断是否为空，如果空直接false。因为如果有环是不可能有出口的。</li>
</ol>
<h1 id="Day10-环形链表-II"><a href="#Day10-环形链表-II" class="headerlink" title="Day10 环形链表 II"></a>Day10 <a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表 II</a></h1><ol>
<li>和上一题的思路基本一致，就是哈希表存已经访问过的节点</li>
<li>也可以通过快慢指针，然后通过一个数学特性算出第一个重复的节点是谁</li>
</ol>
<h1 id="Day10-合并两个有序链表"><a href="#Day10-合并两个有序链表" class="headerlink" title="Day10 合并两个有序链表"></a>Day10 <a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></h1><ol>
<li>用两个指针分别指向两个表头，每次选取小的那个加入新链表。因为对于同一个链表在结果链表中的元素，肯定是有序的，因此只需要保证每次两个链表中跳转初也是有序的就好</li>
<li>可以建立一个哨兵节点，就是new一个任意值的node，然后头节点就不需要特殊处理了</li>
</ol>
<h1 id="Day11-两数相加"><a href="#Day11-两数相加" class="headerlink" title="Day11 两数相加"></a>Day11 <a href="https://leetcode.cn/problems/add-two-numbers/">两数相加</a></h1><ol>
<li>zza之前带我做过的题目</li>
<li>Gemini优化：设置prehead，这样头节点不需要单独处理</li>
<li>使用while l1 or l2 or carry，这样只要有一个没走完，就能继续使用同一套处理逻辑</li>
<li>两个数的值先用2个本地的int变量存储，这样即使一个节点是空的，我们也不需要构造一个val&#x3D;0的节点，而是把这个int变量&#x3D;0就行</li>
<li>善用a &#x3D; b if condition else c，提升面临两种选择的灵活性</li>
<li>链表不要忘了继续往前走，不然会死循环超时</li>
</ol>
<h1 id="Day11-删除链表的倒数第-N-个结点"><a href="#Day11-删除链表的倒数第-N-个结点" class="headerlink" title="Day11 删除链表的倒数第 N 个结点"></a>Day11 <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第 N 个结点</a></h1><ol>
<li>双指针法，second和first中间间隔n个，这样second到达空时，first正好在倒数第n个</li>
<li>first初始化为prehead，second初始化为head</li>
<li>返回prehead.next</li>
</ol>
<h1 id="Day12-两两交换链表中的节点"><a href="#Day12-两两交换链表中的节点" class="headerlink" title="Day12 两两交换链表中的节点"></a>Day12 <a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">两两交换链表中的节点</a></h1><ol>
<li>如何防止链表的节点指导None.next?</li>
<li>每次只维护一个指针prev，而他后面的两个指针在while循环内再定义。这样就可以在while的循环条件中设置prev.next.next是否存在。</li>
<li>在循环里再定义的好处是，如果在外面定义，那么在循环里需要对3个指针进行迭代，很容易指空</li>
<li>递归解法：假设链表只有前两个没交换，后面都是交换好的，后面使用递归函数返回交换好的列表的头节点。我们只需要把这三个节点接好就行</li>
</ol>
<h1 id="Day12-随机链表的复制"><a href="#Day12-随机链表的复制" class="headerlink" title="Day12 随机链表的复制"></a>Day12 <a href="https://leetcode.cn/problems/copy-list-with-random-pointer/">随机链表的复制</a></h1><ol>
<li>如果没有random指针，是很好处理的，只需要遍历一遍原链表，顺路建立新链表就行</li>
<li>但是有了random链表，需要遍历两次，多加的一次负责设置random指针。因为有的random指针指向的东西在第一次遍历时还没建立到</li>
<li>使用一个哈希表mappimg &#x3D; { } 来建立原节点与新节点的映射</li>
</ol>
<h1 id="Day12-排序链表"><a href="#Day12-排序链表" class="headerlink" title="Day12 排序链表"></a>Day12 <a href="https://leetcode.cn/problems/sort-list/">排序链表</a></h1><ol>
<li>使用归并排序</li>
<li>设置出口：只有1个或者0个元素</li>
<li>使用快慢指针将链表从中点分开：<ol>
<li>slow初始化为head，fast初始化为head.next</li>
<li>while fast and fast.next</li>
<li>最终slow会只向中点前一个（偶数）或者中点（奇数）</li>
<li>将slow.next &#x3D; None</li>
</ol>
</li>
<li>分开后左右两个链表分别做递归排序，然后创建一个新链表，将这两个升序链表做合并</li>
<li>合并时创建一个新的链表dummy节点，然后往后串：每次指向较小的那个节点</li>
<li>最后要返回dummy.next，因为这才是我们合并完的新表头</li>
</ol>
<p>&#x3D;&#x3D;二叉树&#x3D;&#x3D;</p>
<h1 id="Day14-二叉树的中序遍历"><a href="#Day14-二叉树的中序遍历" class="headerlink" title="Day14 二叉树的中序遍历"></a>Day14 <a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">二叉树的中序遍历</a></h1><ol>
<li>定义一个函数 inorderTraverse，然后递归调用他，为什么不用题目给的本身的函数调用？因为他的返回值是一个list，而我们的函数不需要返回，只需要把list传进去，然后修改result就行</li>
<li>在递归的那个函数中，就是调用自己的左递归，然后visit中间节点，然后右递归</li>
</ol>
<h1 id="Day14-二叉树的最大深度"><a href="#Day14-二叉树的最大深度" class="headerlink" title="Day14 二叉树的最大深度"></a>Day14 <a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></h1><ol>
<li>以当前节点为树的最大深度 &#x3D; 1 + max(左树深度，右树深度)</li>
<li>Python 不可变变量传参，无法引用传递，只能值传递</li>
</ol>
<h1 id="Day15-翻转二叉树"><a href="#Day15-翻转二叉树" class="headerlink" title="Day15 翻转二叉树"></a>Day15 <a href="https://leetcode.cn/problems/invert-binary-tree/">翻转二叉树</a></h1><ol>
<li>左，右子树分别做翻转</li>
<li>左节点和右节点的指针交换</li>
</ol>
<h1 id="Day15-对称二叉树"><a href="#Day15-对称二叉树" class="headerlink" title="Day15 对称二叉树"></a>Day15 <a href="https://leetcode.cn/problems/symmetric-tree/">对称二叉树</a></h1><ol>
<li>使用一个辅助函数判断两棵树是否镜像：<ol>
<li>根节点相等</li>
<li>node1.左 isMirror node2.右</li>
<li>node1.右 isMirror node1.左</li>
</ol>
</li>
</ol>
<h1 id="Day16-二叉树的直径"><a href="#Day16-二叉树的直径" class="headerlink" title="Day16 二叉树的直径"></a>Day16 <a href="https://leetcode.cn/problems/diameter-of-binary-tree/">二叉树的直径</a></h1><ol>
<li>二叉树的深度的升级版：</li>
<li>对于以每一个节点为转折点的所有子树中，最大的直径就是左子树的深度 + 右子树的深度</li>
<li>所以只要在求深度（后序遍历）的过程中，顺带更新一下这个最大值就好</li>
<li>因为求深度函数返回的是深度，而本题函数要返回的是最大直径，因此需要用一个辅助函数来递归</li>
</ol>
<h1 id="Day16-二叉树的层序遍历"><a href="#Day16-二叉树的层序遍历" class="headerlink" title="Day16 二叉树的层序遍历"></a>Day16 <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">二叉树的层序遍历</a></h1><ol>
<li>每pop一个，就把它的左右节点加到队列里。这样孩子的孩子的遍历次序就会集成他们parent的地位。而由于每次只加2个直系的孩子，所以不会导致像递归那样一条路走到底</li>
<li>由于层和层的结果要区分开，所以在while里面还需要一个for来控制取出几个，而每一层将要开始时，队列里面有几个元素，就是这一层有几个</li>
<li>注意ans数组里面放的是node.val而非node</li>
</ol>
<h1 id="Day17-将有序数组转换为二叉搜索树"><a href="#Day17-将有序数组转换为二叉搜索树" class="headerlink" title="Day17 将有序数组转换为二叉搜索树"></a>Day17 <a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">将有序数组转换为二叉搜索树</a></h1><ol>
<li>平衡二叉搜索树：左子树的值&lt;根节点&lt;右子树</li>
<li>递归构建子树：root &#x3D; nums[ (left + right) &#x2F;&#x2F; 2]，返回构建完的子树的root，接受left和right作为索引，而不是传递数组的切片拷贝。</li>
<li>每次在调用的时候传递left 和 right参数</li>
<li>取数组中点：mid &#x3D; (left + right) &#x2F;&#x2F; 2</li>
</ol>
<h1 id="Day18-验证二叉搜索树"><a href="#Day18-验证二叉搜索树" class="headerlink" title="Day18 验证二叉搜索树"></a>Day18 <a href="https://leetcode.cn/problems/validate-binary-search-tree/">验证二叉搜索树</a></h1><ol>
<li>思考方式：从上往下思考：根节点的值会将左右子树的范围一分为二，左子树必须小于root，但是不能太小，因为root这个子树本身也有一个上下界</li>
<li>新建一个递归函数，接受 lower 和 upper， 先对root.val判断在不在这个界限里，然后根据root.val对左右子树的范围做进一步的切分。</li>
</ol>
<h1 id="Day19-二叉搜索树中第-K-小的元素"><a href="#Day19-二叉搜索树中第-K-小的元素" class="headerlink" title="Day19 二叉搜索树中第 K 小的元素"></a>Day19 <a href="https://leetcode.cn/problems/kth-smallest-element-in-a-bst/">二叉搜索树中第 K 小的元素</a></h1><ol>
<li>BST中序遍历后一定得到一个从小排到大的数组</li>
<li>取出第k-1个元素，就是第k小的元素</li>
</ol>
<h1 id="Day20-二叉树的右视图"><a href="#Day20-二叉树的右视图" class="headerlink" title="Day20 二叉树的右视图"></a>Day20 <a href="https://leetcode.cn/problems/binary-tree-right-side-view/">二叉树的右视图</a></h1><ol>
<li>就是层序遍历，每一层的最后一个结果加入ans就行</li>
<li>注意deque的pop是栈，想要队列需要popleft()</li>
<li>for循环内部 dq在变化，所以需要提前备份len，来判断是否循环到了当前层最后一个</li>
</ol>
<h1 id="Day27-从前序与中序遍历序列构造二叉树"><a href="#Day27-从前序与中序遍历序列构造二叉树" class="headerlink" title="Day27 从前序与中序遍历序列构造二叉树"></a>Day27 <a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">从前序与中序遍历序列构造二叉树</a></h1><ol>
<li>依次从先序里面取节点，取出来的都是根，因为先序总是先visit根，因此先序的顺序就是子树构建的顺序</li>
<li>使用一个self.preorder-index来维护先序的指针</li>
<li>然后在中序中使用list.index(val, left, right+1)找到根，划分出新的左右边界，递归地根据新的inorder的数组来构建相应的子树</li>
</ol>
<h1 id="Day27-路径总和-III"><a href="#Day27-路径总和-III" class="headerlink" title="Day27 路径总和 III"></a>Day27 <a href="https://leetcode.cn/problems/path-sum-iii/">路径总和 III</a></h1><ol>
<li>先先序遍历这颗树，对于每一个根节点，调用辅助函数countFromRoot算出以此根节点往下出发的等于target的次数</li>
<li>辅助函数负责计算所有以自己为root的路径中，值等于target的条数。target把root.val减掉之后，递归地调用左右子树，等价于以左右子树为根节点，但是target减少的路径</li>
</ol>
<h1 id="Day28-70-爬楼梯"><a href="#Day28-70-爬楼梯" class="headerlink" title="Day28 70. 爬楼梯"></a>Day28 <a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h1><ol>
<li>法1：直接用递归来实现dp，但是需要使用@functools.lru_cache（maximize&#x3D;None）来实现对函数输出的记忆字典改造</li>
<li>法2：先创建一个大小为n的数组，你的任务就是填完所有格子</li>
</ol>
<h1 id="Day28-118-杨辉三角"><a href="#Day28-118-杨辉三角" class="headerlink" title="Day28 118. 杨辉三角"></a>Day28 <a href="https://leetcode.cn/problems/pascals-triangle/">118. 杨辉三角</a></h1><ol>
<li>吸取那个BSF打印二叉树的思想，外层for用来遍历行</li>
<li>然后内层for中，新建一个row列表，然后这一轮结束后，把这个列表再插入到二维列表中</li>
<li>注意在递推中，虽然外层for用的是1,2,3这样来遍历，但是实际append到数组里是0,1,2行，因此二维数组的下标要注意是-2。用来补偿我们人工123计数和实际上列表中012计数的差异，否则会index out of range</li>
</ol>
<h1 id="Day29-打家劫舍"><a href="#Day29-打家劫舍" class="headerlink" title="Day29 打家劫舍"></a>Day29 <a href="https://leetcode.cn/problems/house-robber/">打家劫舍</a></h1><ol>
<li>dp的本质需要调用上一次自己函数的结果，所以首要目的是看清函数本身返回的是什么。对于本题，返回的结果的意义是：打劫<strong>到</strong>第 i 间房的总收益。注意到 是 “到”。说明这间房不一定会被打劫，只是访问到。因此就会引出一个问题，这间房打劫还是不打劫：如果打劫，就是这间房的收益 + dp[i - 2]。如果不打劫，就是dp[i - 1]，注意这2者只能二选一，选择最优解，因此用max连接。</li>
</ol>
<h1 id="Day29-完全平方数"><a href="#Day29-完全平方数" class="headerlink" title="Day29 完全平方数"></a>Day29 <a href="https://leetcode.cn/problems/perfect-squares/">完全平方数</a></h1><ol>
<li>这道题dp[i]的含义是 i最少能被多少个完全平方数的和所表示，那么我们想要求dp[i]，肯定要想方设法使用dp前面的信息。我们思考所有能到达dp[i]的路径：枚举所有小于i的完全平方数j * j，假设dp[i]里包含了他，那么他的最优解就是dp[i - j * j] + 1，再对所有局部路径求min，得到全局最优解</li>
</ol>
<h1 id="Day30-零钱兑换"><a href="#Day30-零钱兑换" class="headerlink" title="Day30 零钱兑换"></a>Day30 <a href="https://leetcode.cn/problems/coin-change/">零钱兑换</a></h1><ol>
<li>这道题和完全平方数一样，假设用了这个硬币，那就把他减掉，然后1+dp[i-coin]。但是区别在于，这题中有的dp slot可能是不存在的，因此使用floa(‘inf)表示，即使-1了还是不变，并不影响我们取min，这样方便一点<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        dp = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (amount + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, amount + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> coin &lt;= amount:</span><br><span class="line"></span><br><span class="line">                        dp[i] = <span class="built_in">min</span>(dp[i - coin] + <span class="number">1</span>, dp[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[amount] <span class="keyword">if</span> dp[amount] != <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Day30单词拆分"><a href="#Day30单词拆分" class="headerlink" title="Day30单词拆分"></a>Day30<a href="https://leetcode.cn/problems/word-break/">单词拆分</a></h1><ol>
<li>虽然变成了字符串，但还是要从前往后把子串拿出来。dp[i]的意义是s的第i位截止的单词是否符合题意。这样直到迭代到dp[n]。再用j去从Window中截取最后一个单词出来。</li>
<li>转移方程：最后一个单词在list中 &amp;&amp; dp前面那个单词是True<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">        dp = [<span class="literal">False</span>] * (n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            window = s[:i]</span><br><span class="line"></span><br><span class="line">            window_length = <span class="built_in">len</span>(window)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,window_length+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">                post = window[-j:]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> dp[i-j] <span class="keyword">and</span> post <span class="keyword">in</span> wordDict:</span><br><span class="line"></span><br><span class="line">                    dp[i] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Day30-最长递增子序列"><a href="#Day30-最长递增子序列" class="headerlink" title="Day30 最长递增子序列"></a>Day30 <a href="https://leetcode.cn/problems/longest-increasing-subsequence/">最长递增子序列</a></h1><ol>
<li>这题dp[i]的意义是，以第i-1个下标结尾的串，他的最长序列是多少。注意与前面不同的是：必须要以这个结尾（包含这个char），如果不以他结尾而取了前面别人的最大值，会导致后面与它大小判断的错误。</li>
<li>因为这个题的转移方程是：遍历前面所有的dp[j]，如果这个nums[i] &gt;nums[j]，说明i可以跟在j后面，因此才能继承j的dp值。</li>
<li>由于dp[i]后面可能会小于前面，并不是对前面整体取max，所以最后return的时候要return max(dp)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLIS</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">1</span>] * (n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> nums[i] &gt; nums[j]:</span><br><span class="line"></span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Day31-乘积最大子数组（不熟）"><a href="#Day31-乘积最大子数组（不熟）" class="headerlink" title="Day31 乘积最大子数组（不熟）"></a>Day31 <a href="https://leetcode.cn/problems/maximum-product-subarray/">乘积最大子数组</a>（不熟）</h1><ol>
<li>原先的想法是维护两个 dp 数组，一个正数，一个负数</li>
<li>Gemini 提出了 O1 空间的解法：维护 max_so_far和min_so_far，意义是以上一个结尾的最大值。</li>
<li>遍历数组，每一个 nums[i]都要决定：max_so_far和 min 是要以自己开始，还是作为乘积接在上一个子数组后面</li>
<li>每一次遍历都要维护全局最大值 result<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">maxProduct</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">	</span><br><span class="line">	max_so_far = min_so_far = nums[<span class="number">0</span>]</span><br><span class="line">	</span><br><span class="line">	n = <span class="built_in">len</span>(nums)</span><br><span class="line">	</span><br><span class="line">	result = max_so_far</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">	</span><br><span class="line">	tmp_max_so_far = <span class="built_in">max</span>(nums[i], nums[i]*max_so_far, nums[i]*min_so_far)</span><br><span class="line">	</span><br><span class="line">	min_so_far = <span class="built_in">min</span>(nums[i], nums[i]*max_so_far, nums[i]*min_so_far)</span><br><span class="line">	</span><br><span class="line">	max_so_far = tmp_max_so_far</span><br><span class="line">	</span><br><span class="line">	result = <span class="built_in">max</span>(result, max_so_far)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Day-32-分割等和子集（不熟）"><a href="#Day-32-分割等和子集（不熟）" class="headerlink" title="Day 32 分割等和子集（不熟）"></a>Day 32 <a href="https://leetcode.cn/problems/partition-equal-subset-sum/">分割等和子集</a>（不熟）</h1><ol>
<li>01 背包问题，weight 和 value 都是 数字的值</li>
<li>dp[i][j]的意义是，已经放到第 i 的数字的前提下，其总和不能超过 j的最大值</li>
<li>最后判断 dp[n][target]的最大值是否 &#x3D;&#x3D; target，因为这个最大值最大就是塞满整个背包</li>
<li>一个数组里面找到一个子集的和等于另一个，等价于找到一个子集的和是整个数组的一半<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">canPartition</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">sum</span>(nums) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	</span><br><span class="line">	  </span><br><span class="line">	</span><br><span class="line">	target = <span class="built_in">sum</span>(nums) // <span class="number">2</span></span><br><span class="line">	</span><br><span class="line">	n = <span class="built_in">len</span>(nums)</span><br><span class="line">	</span><br><span class="line">	dp = [[<span class="number">0</span>] * (target + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">	</span><br><span class="line">	  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,target + <span class="number">1</span>):</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> j &lt; nums[i - <span class="number">1</span>]:</span><br><span class="line">	</span><br><span class="line">	dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">	</span><br><span class="line">	  </span><br><span class="line">	</span><br><span class="line">	dp[i][j] = <span class="built_in">max</span>(nums[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]], dp[i - <span class="number">1</span>][j])</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> dp[n][target] == target</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>算法题</category>
      </categories>
  </entry>
  <entry>
    <title>做饭日记</title>
    <url>/2025/09/05/food/%E5%81%9A%E9%A5%AD%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="（图片加载较慢）"><a href="#（图片加载较慢）" class="headerlink" title="（图片加载较慢）"></a>（图片加载较慢）</h1><h3 id="香煎照烧鸡胸肉"><a href="#香煎照烧鸡胸肉" class="headerlink" title="香煎照烧鸡胸肉"></a>香煎照烧鸡胸肉</h3><p>鸡胸肉加入淀粉煎制，比直接煎强。但是酱汁太淡了</p>
<p><img src="/../../images/IMG_9459(1).jpg"></p>
<h3 id="番茄滑蛋牛肉"><a href="#番茄滑蛋牛肉" class="headerlink" title="番茄滑蛋牛肉"></a>番茄滑蛋牛肉</h3><p>老问题，番茄没有番茄味<br><img src="/../../images/IMG_9375%201.jpg"></p>
<p><img src="/../../images/IMG_9451.jpg"></p>
<h3 id="上汤西兰花"><a href="#上汤西兰花" class="headerlink" title="上汤西兰花"></a>上汤西兰花</h3><p>好吃的，下次多搞点咸鸭蛋黄<br><img src="/../../images/IMG_9375.jpg"></p>
<h3 id="法式白汁"><a href="#法式白汁" class="headerlink" title="法式白汁"></a>法式白汁</h3><p>大失败，葡萄酒放太多了<br><img src="/../../images/IMG_9064.jpg"></p>
<h3 id="香菜牛肉意面"><a href="#香菜牛肉意面" class="headerlink" title="香菜牛肉意面"></a>香菜牛肉意面</h3><p>牛肉汤做啥都香<br><img src="/../../images/IMG_9015.jpg"></p>
<h3 id="牛排5-0"><a href="#牛排5-0" class="headerlink" title="牛排5.0"></a>牛排5.0</h3><p>稳定发挥，没啥说的<br><img src="/../../images/IMG_8813(1).jpg"></p>
<h3 id="大杂烩饺子"><a href="#大杂烩饺子" class="headerlink" title="大杂烩饺子"></a>大杂烩饺子</h3><p>饺子吃不完了<br><img src="/../../images/IMG_8516.jpg"></p>
<h3 id="鸡胸肉配金枪鱼排"><a href="#鸡胸肉配金枪鱼排" class="headerlink" title="鸡胸肉配金枪鱼排"></a>鸡胸肉配金枪鱼排</h3><p>这个金枪鱼疑似是大豆蛋白做的<br><img src="/../../images/IMG_8507(1).jpg"></p>
<h3 id="中西意面"><a href="#中西意面" class="headerlink" title="中西意面"></a>中西意面</h3><p>主打有啥放啥<br><img src="/../../images/IMG_8465.jpg"></p>
<h3 id="避风塘炒蟹"><a href="#避风塘炒蟹" class="headerlink" title="避风塘炒蟹"></a>避风塘炒蟹</h3><p>这个避风塘炒料太咸了。。<br><img src="/../../images/IMG_8457.jpg"></p>
<h3 id="水波蛋"><a href="#水波蛋" class="headerlink" title="水波蛋"></a>水波蛋</h3><p>半夜猪瘾犯了。空气炸锅130度13分钟，完美的流心。</p>
<p><img src="/../../images/IMG_8143(2).jpg"></p>
<h3 id="Lasgna"><a href="#Lasgna" class="headerlink" title="Lasgna"></a>Lasgna</h3><p>哦一西。但是里面汤汁过多。疑似意面没有控干水，以及番茄等内部蔬菜受热水蒸气被芝士阻挡无法蒸发。<br><img src="/../../images/IMG_8133(1).jpg"></p>
<p><img src="/../../images/IMG_8137.jpg"></p>
<h3 id="牛排4-0"><a href="#牛排4-0" class="headerlink" title="牛排4.0"></a>牛排4.0</h3><p>比上次偏老。但是这次摆盘好看<br><img src="/../../images/IMG_8127.jpg"></p>
<h3 id="牛排3-0"><a href="#牛排3-0" class="headerlink" title="牛排3.0"></a>牛排3.0</h3><p>完美的七分熟。芦笋根部偏老<br><img src="/../../images/IMG_8045(1).jpg"></p>
<h3 id="奶油蘑菇汤"><a href="#奶油蘑菇汤" class="headerlink" title="奶油蘑菇汤"></a>奶油蘑菇汤</h3><p>伟大无需多言<img src="/../../images/IMG_8015(1).jpg"></p>
<h3 id="奶汁烩红对虾"><a href="#奶汁烩红对虾" class="headerlink" title="奶汁烩红对虾"></a>奶汁烩红对虾</h3><p>我那么大一只虾做完之后就这么点？</p>
<p><img src="/../../images/IMG_8001(1).jpg"></p>
<h3 id="番茄意面"><a href="#番茄意面" class="headerlink" title="番茄意面"></a>番茄意面</h3><p>番茄味不够，下次改用番茄罐头<br><img src="/../../images/IMG_7918.jpg"></p>
<h3 id="牛排2-0"><a href="#牛排2-0" class="headerlink" title="牛排2.0"></a>牛排2.0</h3><p>换铸铁锅。每面1min，外侧全熟而内侧raw。<br><img src="/../../images/IMG_7907(2).jpg"></p>
<p><img src="/../../images/IMG_7909(2).jpg"></p>
<h3 id="牛排1-0"><a href="#牛排1-0" class="headerlink" title="牛排1.0"></a>牛排1.0</h3><p>全熟，极难咀嚼。每面超过3min</p>
<p><img src="/../../images/IMG_7902.jpg"></p>
<h3 id="响油鳝丝1-0"><a href="#响油鳝丝1-0" class="headerlink" title="响油鳝丝1.0"></a>响油鳝丝1.0</h3><p>神中神，下次记得买大而粗的鳝丝，口感更佳<img src="/../../images/IMG_7901.jpg"></p>
]]></content>
      <categories>
        <category>做饭</category>
      </categories>
  </entry>
  <entry>
    <title>Ragflow 智能切片</title>
    <url>/2025/09/18/%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE/RAG/Ragflow%20%E6%99%BA%E8%83%BD%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<ol>
<li>传统切片：按照页数或者字数粗暴的切，比如 200 字一个 chunk<br> 缺点：切片时可能没有考虑到语义信息，导致一个语义块被拆成两部分，那有的关键信息可能就无法被 RAG 召回</li>
<li>智能切片：<ol>
<li>先对文档进行 cv，转化成 md 的形式</li>
<li>切分成自然语义块：根据 换行符，句号先分成一个个 chunk 。如果这个 chunk 的 token 比较少，再尝试和后面一个 chunk 合并，直到 token 数接近设置的阈值</li>
<li>如果遇到超大语义块：使用次级分隔符，比如：，；进行切割<ol>
<li>&#x3D;&#x3D;亮点 &#x3D;&#x3D;：overlap 重叠机制：前后 2 个 chunk 会有一定重合，防止关键上下文丢失</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Embedding</title>
    <url>/2025/09/18/%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE/RAG/Embedding/</url>
    <content><![CDATA[<p><img src="/../../../images/Page1%203%201.jpg"><img src="/../../../images/Page2%203%201.jpg"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>RAG</category>
      </categories>
  </entry>
  <entry>
    <title>向量数据库</title>
    <url>/2025/09/18/%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE/RAG/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>数据库名称</th>
<th>类型</th>
<th>核心优势</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Milvus &#x2F; Zilliz Cloud</strong></td>
<td>开源 &#x2F; 云服务</td>
<td>功能全面强大，专为大规模设计</td>
<td>大规模、高并发的专业AI应用</td>
</tr>
<tr>
<td><strong>Pinecone</strong></td>
<td>云服务</td>
<td>简单易用，性能卓越，完全托管</td>
<td>快速开发，商业生产环境</td>
</tr>
<tr>
<td><strong>Qdrant</strong></td>
<td>开源</td>
<td>性能高，高级过滤能力强</td>
<td>需要复杂过滤规则的生产环境</td>
</tr>
<tr>
<td><strong>Weaviate</strong></td>
<td>开源</td>
<td>内置Embedding，图结构，上下文搜索</td>
<td>需要端到端解决方案，数据有关联性</td>
</tr>
<tr>
<td><strong>ChromaDB</strong></td>
<td>开源</td>
<td>轻量，专为AI应用开发流程设计</td>
<td>本地开发，快速原型，中小型项目</td>
</tr>
<tr>
<td><strong>PostgreSQL + pgvector</strong></td>
<td>数据库扩展</td>
<td>技术栈简单，与现有数据无缝集成</td>
<td>已使用Postgres的中小型项目</td>
</tr>
<tr>
<td><strong>Redis + RediSearch</strong></td>
<td>数据库扩展</td>
<td>内存级速度，实时性强</td>
<td>对延迟要求极高的实时应用</td>
</tr>
<tr>
<td><strong>Faiss</strong></td>
<td>库</td>
<td>算法核心，极致的定制化和性能</td>
<td>深度集成到自定义应用中</td>
</tr>
</tbody></table>
<p>当然，很高兴您对这个例子感兴趣。结合这个例子来理解“为什么需要两个数据库”以及“向量数据库的优势”，可以帮助我们更深刻地理解现代RAG架构的精妙之处。</p>
<p>我们可以用一个非常贴切的比喻来概括：</p>
<p><strong>把整个知识库想象成一个大型图书馆。</strong></p>
<ul>
<li><p><strong>关系型数据库 (PostgreSQL)</strong> 就是存放所有实体<strong>书籍的书架</strong>。每本书（Chunk原文）都有一个精确的编号（<code>chunk_id</code>），只要你知道编号，就能瞬间找到这本书。</p>
</li>
<li><p><strong>向量数据库 (Milvus&#x2F;Chroma)</strong> 则是图书馆的<strong>智能搜索引擎&#x2F;索引目录</strong>。它不存放书本身，而是存放了每本书核心思想的“摘要”和“概念坐标”（Vector）。</p>
</li>
</ul>
<p>你不会只用其中一个，因为它们的功能完全不同但又相辅相成。</p>
<hr>
<h3 id="为什么要使用两个数据库：专业分工，强强联合"><a href="#为什么要使用两个数据库：专业分工，强强联合" class="headerlink" title="为什么要使用两个数据库：专业分工，强强联合"></a>为什么要使用两个数据库：专业分工，强强联合</h3><p>不将向量和原文存在一起，主要是出于<strong>性能、功能和扩展性</strong>的极致追求。这是一种典型的“专业分工”思想。</p>
<ol>
<li><p><strong>核心功能完全不同 (Specialized Functions):</strong></p>
<ul>
<li><p><strong>关系型数据库的专长：</strong></p>
<ul>
<li><p><strong>精确查询：</strong> 它的核心是结构化数据管理。执行 <code>SELECT content FROM chunks WHERE chunk_id = &#39;doc1-chunk-002&#39;</code> 这种基于精确键值的查询，速度快如闪电。</p>
</li>
<li><p><strong>事务与一致性：</strong> 保证数据的ACID特性（原子性、一致性、隔离性、持久性），对于管理知识库、用户信息等关键数据至关重要。</p>
</li>
<li><p><strong>存储原文最合适：</strong> 存储文本、页码、文档名这些结构化的[[元数据]]，是它的“本职工作”。</p>
</li>
</ul>
</li>
<li><p><strong>向量数据库的专长：</strong></p>
<ul>
<li><strong>模糊&#x2F;语义搜索：</strong> 它的唯一使命就是在亿万级的高维向量中，进行超高速的<strong>相似度搜索</strong>。它要回答的问题不是“ID为X的内容是什么”，而是“和这个意思最像的内容是哪些”。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>性能优化方向不同 (Different Performance Optimizations):</strong></p>
<ul>
<li><p>关系型数据库如果要计算相似度，它需要做“暴力”的全表扫描：取出每一条记录，计算它和查询向量的余弦相似度，然后排序。当数据量变大时，这会慢到无法接受。</p>
</li>
<li><p>向量数据库则使用了专门的**[[近似最近邻（ANN）算法]]**（如 HNSW、IVF-PQ 等）。这些算法通过构建特殊的索引结构，可以牺牲极小的精度（比如99.9%的准确率）来换取成千上万倍的搜索速度，实现毫秒级的响应。</p>
</li>
</ul>
</li>
<li><p><strong>扩展性与成本考量 (Scalability and Cost):</strong></p>
<ul>
<li><p>向量计算和存储是资源密集型的，尤其是在大规模场景下。将向量系统独立出来，意味着当搜索成为瓶颈时，你可以<strong>独立地扩展向量数据库集群</strong>，而不用动存储原文的关系型数据库。</p>
</li>
<li><p>反之亦然，如果只是文档数量增多，你可以只扩展关系型数据库的存储。这种**[[分离式架构]]**让系统扩展更灵活，成本也更可控。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="向量数据库的核心优势"><a href="#向量数据库的核心优势" class="headerlink" title="向量数据库的核心优势"></a>向量数据库的核心优势</h3><p>现在我们来聚焦向量数据库本身，它到底“神”在哪里？</p>
<ol>
<li><p><strong>超越关键词匹配，实现真正的&#x3D;&#x3D;[[语义理解]]&#x3D;&#x3D;：</strong> 这是它与传统搜索引擎（如Elasticsearch的BM25算法）最根本的区别。</p>
<ul>
<li><p><strong>关键词搜索：</strong> 你搜“汽车”，它只会返回包含“汽车”这个词的文档。它不认识“轿车”或“automobile”。</p>
</li>
<li><p><strong>向量搜索：</strong> 你搜“汽车”，它的查询向量会和“轿车”、“automobile”、“车辆”等词的向量在语义空间中非常接近。因此，即使原文中没有“汽车”这个词，但只要意思相关，就能被准确地召回。</p>
</li>
<li><p><strong>在我们的例子中：</strong> 用户问“芯片功耗是多少”，即使原文Chunk B中没有“多少”这个词，但向量模型理解了问题的核心意图是查询“功耗”的“数值”，因此能精准匹配到包含功耗数据的表格。</p>
</li>
</ul>
</li>
<li><p><strong>为&#x3D;&#x3D;[[非结构化数据]]而生：</strong> 文本、图片、音频、视频&#x3D;&#x3D;……这些都是非结构化数据，无法直接存入传统数据库的行列中进行有意义的查询。但通过[[Embedding]]模型，这些数据都可以被转换成向量。向量数据库使得<strong>对一切非结构化数据进行语义搜索</strong>成为了可能。</p>
</li>
<li><p><strong>极致的查询性能与高扩展性：</strong> 如前所述，通过专门的ANN索引算法，向量数据库可以在数十亿规模的数据集上实现毫秒级的相似度查询。并且它们通常被设计为分布式系统，可以水平扩展以应对不断增长的数据量。</p>
</li>
<li><p><strong>&#x3D;&#x3D;专为AI应用打造：</strong> 向量数据库是AI时代的产物，它完美承接了深度学习模型（尤其是Embedding模型）的输出。它不仅仅是一个存储系统，更是连接模型理解能力与实际应用的桥梁，是构建大模型记忆体、推荐系统、图像检索等众多AI应用的核心基础设施。</p>
</li>
</ol>
<p><strong>总结一下：</strong></p>
<p>使用两个数据库，就像我们的大脑一样。关系型数据库像是负责<strong>精确记忆</strong>的“海马体”，能准确无误地调取“昨天晚饭吃了什么”；而向量数据库则像是负责<strong>联想与归纳</strong>的“新皮层”，当你想到“假期”时，它会为你链接到“沙滩”、“旅游”、“放松”等一系列相关概念。</p>
<p>在RAG中，正是这种<strong>精确存储</strong>与<strong>智能联想</strong>的完美结合，才让系统既能“记得准”，又能“想得到”，从而实现了高质量的知识检索与生成。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>RAG</category>
      </categories>
  </entry>
  <entry>
    <title>RAG流程</title>
    <url>/2025/09/18/%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE/RAG/RAG%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>假设我们上传一份关于某AI芯片的技术白皮书 **<code>QuantumLeap_AI_Chip.pdf</code>**。</p>
<hr>
<h3 id="阶段一：数据入库-Ingestion"><a href="#阶段一：数据入库-Ingestion" class="headerlink" title="阶段一：数据入库 (Ingestion)"></a>阶段一：数据入库 (Ingestion)</h3><h4 id="步骤1：原始文档内容-第5页"><a href="#步骤1：原始文档内容-第5页" class="headerlink" title="步骤1：原始文档内容 (第5页)"></a><strong>步骤1：原始文档内容 (第5页)</strong></h4><p>文档第5页有以下内容：</p>
<blockquote>
<p><strong>3.1 功耗表现</strong> QuantumLeap AI芯片采用了先进的7nm EUV工艺，通过动态电压频率调整技术（DVFS）实现了卓越的能效比。</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>功耗 (瓦)</th>
</tr>
</thead>
<tbody><tr>
<td>空闲模式</td>
<td>0.5W</td>
</tr>
<tr>
<td>活跃模式</td>
<td>5W</td>
</tr>
<tr>
<td>峰值模式</td>
<td>15W</td>
</tr>
</tbody></table>
<p>Export to Sheets</p>
</blockquote>
<h4 id="步骤2：-Ragflow-智能切片"><a href="#步骤2：-Ragflow-智能切片" class="headerlink" title="步骤2：[[Ragflow 智能切片]]"></a><strong>步骤2：[[Ragflow 智能切片]]</strong></h4><p>RAGFlow 不会粗暴地从中间切开。它会识别出这里的结构：一个标题、一个段落和一个表格。</p>
<ul>
<li><p>它可能会将标题和紧随其后的段落<strong>合并</strong>，因为它们语义紧密且内容不长。这形成了 <strong>Chunk A</strong>。</p>
</li>
<li><p>它会将整个表格识别为一个独立的、完整的单元。这形成了 <strong>Chunk B</strong>。</p>
</li>
</ul>
<p>我们得到两个切片：</p>
<ul>
<li><p><strong>Chunk A (ID: <code>doc1-chunk-001</code>)</strong>:</p>
<blockquote>
<p><strong>文本内容</strong>: “3.1 功耗表现\nQuantumLeap AI芯片采用了先进的7nm EUV工艺，通过动态电压频率调整技术（DVFS）实现了卓越的能效比。”
  </p>
</blockquote>
</li>
<li><p><strong>Chunk B (ID: <code>doc1-chunk-002</code>)</strong>:</p>
<blockquote>
<p><strong>文本内容 (可能被转换为Markdown)</strong>: “| 模式 | 功耗 (瓦) | \n| :— | :— | \n| 空闲模式 | 0.5W | \n| 活跃模式 | 5W | \n| 峰值模式 | 15W |”</p>
</blockquote>
</li>
</ul>
<h4 id="步骤3：嵌入-Embedding"><a href="#步骤3：嵌入-Embedding" class="headerlink" title="步骤3：嵌入 (Embedding)"></a><strong>步骤3：嵌入 (Embedding)</strong></h4><p>系统使用 Embedding 模型，将这两个切片的文本内容分别转换成向量：</p>
<ul>
<li><p><code>Chunk A 的文本</code> -&gt; <code>模型</code> -&gt; <code>Vector_A</code> (一个数字数组，如 <code>[0.15, -0.78, 0.33, ...]</code>)</p>
</li>
<li><p><code>Chunk B 的文本</code> -&gt; <code>模型</code> -&gt; <code>Vector_B</code> (另一个数字数组，如 <code>[0.67, 0.21, -0.54, ...]</code>)</p>
</li>
</ul>
<h4 id="步骤4：分别存储"><a href="#步骤4：分别存储" class="headerlink" title="步骤4：分别存储"></a><strong>步骤4：分别存储</strong></h4><p>现在，数据被存入两个数据库：</p>
<ol>
<li><p><strong>[[向量数据库]] (以 Milvus 为例)</strong> 这里只关心向量和它的ID，用于快速比较。 | ID | Vector | | :— | :— | | <code>doc1-chunk-001</code> | <code>[0.15, -0.78, 0.33, ...]</code> | | <code>doc1-chunk-002</code> | <code>[0.67, 0.21, -0.54, ...]</code> |</p>
</li>
<li><p><strong>关系型数据库 (以 PostgreSQL 为例)</strong> 这里存储所有可读的详细信息。 | chunk_id | content | metadata | | :— | :— | :— | | <code>doc1-chunk-001</code> | “3.1 功耗表现\nQuantumLeap AI芯片…” | <code>&#123; &quot;doc_name&quot;: &quot;QL_AI_Chip.pdf&quot;, &quot;page&quot;: 5, &quot;type&quot;: &quot;text&quot; &#125;</code> | | <code>doc1-chunk-002</code> | “| 模式 | 功耗 (瓦) | \n| :— |…” | <code>&#123; &quot;doc_name&quot;: &quot;QL_AI_Chip.pdf&quot;, &quot;page&quot;: 5, &quot;type&quot;: &quot;table&quot; &#125;</code> |</p>
</li>
</ol>
<hr>
<h3 id="阶段二：用户查询与召回-Retrieval-余弦相似度计算"><a href="#阶段二：用户查询与召回-Retrieval-余弦相似度计算" class="headerlink" title="阶段二：用户查询与召回 (Retrieval)([[余弦相似度计算]])"></a>阶段二：用户查询与召回 (Retrieval)([[余弦相似度计算]])</h3><h4 id="步骤5：用户提问"><a href="#步骤5：用户提问" class="headerlink" title="步骤5：用户提问"></a><strong>步骤5：用户提问</strong></h4><p>一个用户向系统提问：“<strong>QuantumLeap 芯片在不同模式下的功耗是多少？</strong>”</p>
<h4 id="步骤6：问题嵌入"><a href="#步骤6：问题嵌入" class="headerlink" title="步骤6：问题嵌入"></a><strong>步骤6：问题嵌入</strong></h4><p>系统使用<strong>完全相同</strong>的 Embedding 模型，将用户的问题也转换成一个向量：</p>
<ul>
<li><code>&quot;QuantumLeap 芯片在不同模式下的功耗是多少？&quot;</code> -&gt; <code>模型</code> -&gt; <code>Query_Vector</code> (例如 <code>[0.65, 0.19, -0.51, ...]</code>)</li>
</ul>
<h2 id="阶段三：-rerank"><a href="#阶段三：-rerank" class="headerlink" title="阶段三： [[rerank]]"></a>阶段三： [[rerank]]</h2><h4 id="步骤7：向量搜索"><a href="#步骤7：向量搜索" class="headerlink" title="步骤7：向量搜索"></a><strong>步骤7：向量搜索</strong></h4><p>系统拿着 <code>Query_Vector</code> 去<strong>向量数据库</strong>中进行搜索。数据库计算 <code>Query_Vector</code> 与所有已存储向量的“语义相似度”。</p>
<ul>
<li><p><code>Query_Vector</code> (<code>[0.65, ...]</code>) 与 <code>Vector_A</code> (<code>[0.15, ...]</code>) 的相似度较低。</p>
</li>
<li><p><code>Query_Vector</code> (<code>[0.65, ...]</code>) 与 <code>Vector_B</code> (<code>[0.67, ...]</code>) 的相似度<strong>非常高</strong>，因为它们都包含“模式”和“功耗”的核心语义。</p>
</li>
</ul>
<p>向量数据库返回最匹配的ID列表，排在第一位的是：<code>[&quot;doc1-chunk-002&quot;]</code>。</p>
<h4 id="步骤8：获取原文"><a href="#步骤8：获取原文" class="headerlink" title="步骤8：获取原文"></a><strong>步骤8：获取原文</strong></h4><p>系统拿到这个胜出的ID <code>doc1-chunk-002</code>，去<strong>关系型数据库</strong>中查找。</p>
<ul>
<li>它找到了对应的那一行，取出了 <code>content</code> 字段（也就是那个Markdown格式的表格）和 <code>metadata</code> 字段。</li>
</ul>
<h4 id="步骤9：生成答案"><a href="#步骤9：生成答案" class="headerlink" title="步骤9：生成答案"></a><strong>步骤9：生成答案</strong></h4><p>最后，系统将检索到的内容（表格）和用户的原始问题整合在一起，形成一个提示（Prompt），发送给大语言模型（LLM）。</p>
<ul>
<li><p><strong>发送给LLM的内容类似：</strong></p>
<blockquote>
<p><strong>[背景知识]:</strong> 以下是从文档《QL_AI_Chip.pdf》第5页找到的关于功耗的表格： | 模式 | 功耗 (瓦) | | :— | :— | | 空闲模式 | 0.5W | | 活跃模式 | 5W | | 峰值模式 | 15W |</p>
<p><strong>[用户问题]:</strong> QuantumLeap 芯片在不同模式下的功耗是多少？</p>
<p><strong>[指令]:</strong> 请根据以上背景知识回答用户问题。
  </p>
</blockquote>
</li>
<li><p><strong>LLM输出的最终答案：</strong></p>
<blockquote>
<p>QuantumLeap AI芯片在不同模式下的功耗分别为：空闲模式是0.5W，活跃模式是5W，峰值模式是15W。</p>
</blockquote>
</li>
</ul>
<p>这个例子清晰地展示了两个数据库如何协同工作，通过“向量比对”定位信息，再通过“ID查询”获取原文，最终为用户生成精准的答案。</p>
<h1 id="为什么使用-2-种数据库？"><a href="#为什么使用-2-种数据库？" class="headerlink" title="为什么使用 2 种数据库？"></a>为什么使用 2 种数据库？</h1><ol>
<li>[[向量数据库]]对于向量相似度计算有优化，ANN 算法可以在 99.99%的准确率下，实现比关系型数据库 id 查找快 1w 倍</li>
<li>灵活拓展：采用[[分离式架构]]如果向量相似度计算瓶颈，就只用横向增加向量数据库的集群</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>RAG</category>
      </categories>
  </entry>
  <entry>
    <title>rerank</title>
    <url>/2025/09/18/%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE/RAG/rerank/</url>
    <content><![CDATA[<p><img src="/../../../images/Page3%203.jpg"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>RAG</category>
      </categories>
  </entry>
  <entry>
    <title>强制缓存与协商缓存</title>
    <url>/2025/09/19/HTTP/%E5%BC%BA%E5%88%B6%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h3 id="强制缓存-与-协商缓存-不是两种对立的技术，而是结合使用的："><a href="#强制缓存-与-协商缓存-不是两种对立的技术，而是结合使用的：" class="headerlink" title="强制缓存 与 协商缓存 不是两种对立的技术，而是结合使用的："></a>强制缓存 与 协商缓存 不是两种对立的技术，而是结合使用的：</h3><p>比如一个网站的 logo 在不同页面的 HTML 里都会出现。我在访问页面 A 时收到了 logo.pic, 那在进入页面 B 时就会使用之前缓存的logo.pic<br>[[每传输一个资源都会发起一次HTTP请求]]，</p>
<h3 id="1-优先使用强制缓存："><a href="#1-优先使用强制缓存：" class="headerlink" title="1. 优先使用强制缓存："></a>1. 优先使用强制缓存：</h3><p><strong>基于时间的信任，&#x3D;&#x3D;完全避免网络请求&#x3D;&#x3D;</strong><br>客户端浏览器如果发现要请求的资源在 disk 已经有了，则不会向服务端请求<br>1.1 如何表征一个资源：使用 URL（文件名）<br>    <strong>不一致问题</strong>：如果服务端的文件发生了修改，但是名字没改，这样客户端就不知道这个 URL 的数据发生了变动，导致文件内容与服务端不一致。<br>    <strong>解决方案</strong>：现代的 Webpeck 工具会自动更新 HTML 里面的 URL，加入文件的Hash<br>1.2 如何协议：在 HTTP 头部设置过期时间 和 是否开启强制缓存 的 flag<br>1.3 过期时间：会设置 expire time，如果没到这个时间，浏览器就会默认读取 disk 缓存</p>
<h3 id="2-（强制缓存过期后）使用协商缓存："><a href="#2-（强制缓存过期后）使用协商缓存：" class="headerlink" title="2. （强制缓存过期后）使用协商缓存："></a>2. （强制缓存过期后）使用协商缓存：</h3><p>此时本地缓存已经过期，但不一定代表他不能用了。他可能仍然是最新的，因此客户端需要向服务端发送请求询问这个资源是否仍然 remain latest 。<br><strong>如何询问</strong>：2 个字段：<br>    2.1 if-modified-since：客户端上次受到这个资源的时间<br>    2.2 ETag:文件的哈希，客户端会带上上次服务端发来的 etag，服务端会用此来比对当前文件是否 remains latest<br><strong>服务端返回</strong>：<br>    如果是最新的，就返回 304<br>    如果需要更新，就返回更新的资源，并且 200OK
    </p>
]]></content>
      <categories>
        <category>技术</category>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP协议 完全 是由应用（如Tomcat服务器 实现的）</title>
    <url>/2025/09/20/HTTP/HTTP%E5%8D%8F%E8%AE%AE%20%E5%AE%8C%E5%85%A8%20%E6%98%AF%E7%94%B1%E5%BA%94%E7%94%A8%EF%BC%88%E5%A6%82Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%89/</url>
    <content><![CDATA[<p>user：<br>所以http协议本身就是靠[[Tomcat]]这种web server实现的，os里不会有http协议栈，只会直接给Tomcat交付tcp包的payload</p>
<p>所以HTTP协议想要升级，需要Tomcat这边和浏览器那边的厂家各自修改自己产品的代码</p>
<p>bot：</p>
<h3 id="详细流程解读"><a href="#详细流程解读" class="headerlink" title="详细流程解读"></a>详细流程解读</h3><p>现在，我们来看一个HTTP请求在这个流水线上的旅程：</p>
<ol>
<li><p><strong>Tomcat (应用层) 的工作</strong>：</p>
<ul>
<li><p>当一个请求到来时，Tomcat做的第一件事，是向操作系统申请一个<strong>Socket（套接字）</strong>，这是一个用于网络通信的“插口”。</p>
</li>
<li><p>操作系统会为Tomcat准备好这个“插口”，并处理好所有TCP和IP层面的复杂工作。</p>
</li>
</ul>
</li>
<li><p><strong>OS (传输层&#x2F;网络层) 的工作</strong>：</p>
<ul>
<li><p>操作系统内核中的<strong>TCP&#x2F;IP协议栈</strong>，是这个过程的主力。</p>
</li>
<li><p>它会处理所有TCP包的接收、排序、确认（ACK）、重传等工作。它把所有收到的、可能乱序的TCP包，重新组装成一个<strong>有序的、完整的数据流</strong>。</p>
</li>
<li><p>这个完整的数据流，就是HTTP请求的原始文本（<code>GET /users/123 HTTP/1.1\r\nHost: ...</code>）。这个数据流就是<strong>TCP包的有效载荷（Payload）</strong>。</p>
</li>
<li><p>操作系统<strong>完全不关心</strong>这个Payload里写的是什么。它不认识<code>GET</code>，也不认识<code>Host</code>，对它来说，这只是一串二进制数据。</p>
</li>
</ul>
</li>
<li><p><strong>交付给Tomcat</strong>：</p>
<ul>
<li>操作系统将这个组装好的、完整的数据流，通过之前申请的Socket“插口”，<strong>交付给正在等待的Tomcat应用程序</strong>。</li>
</ul>
</li>
<li><p><strong>Tomcat (应用层) 的再次工作</strong>：</p>
<ul>
<li><p>Tomcat接收到这串完整的二进制数据流（TCP Payload）后，<strong>它自己的代码</strong>才开始工作。</p>
</li>
<li><p>Tomcat内部有专门的HTTP协议解析器，它会去<strong>解读</strong>这串数据流，识别出这是一次GET请求、请求的路径是<code>/users/123</code>、协议版本是HTTP&#x2F;1.1等等。</p>
</li>
<li><p>解析完成后，Tomcat才会把它封装成我们之前讨论的<code>HttpServletRequest</code>对象，交给您的Spring Boot应用去处理。</p>
</li>
</ul>
</li>
</ol>
<p><strong>总结：</strong> 您的理解是100%正确的。</p>
<ul>
<li><p><strong>HTTP协议栈存在于Tomcat这样的Web Server中，而不是操作系统内核里。</strong></p>
</li>
<li><p><strong>操作系统只负责到TCP&#x2F;IP层</strong>，它的最终交付产物就是一个可靠的、有序的数据流，也就是TCP包的Payload。</p>
</li>
<li><p><strong>如何解读这个Payload，是应用层（Tomcat）的职责。</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>Bean</title>
    <url>/2025/09/20/java%E7%9F%A5%E8%AF%86/Bean/</url>
    <content><![CDATA[<p>bean就是带getter 和setter的 类 &#x2F; 对象</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>每个HTTP请求是独立的</title>
    <url>/2025/09/20/HTTP/%E6%AF%8F%E4%B8%AAHTTP%E8%AF%B7%E6%B1%82%E6%98%AF%E7%8B%AC%E7%AB%8B%E7%9A%84(session)/</url>
    <content><![CDATA[<p>user：<br>所有http请求都是独立的，无状态的吗。即使同一对客户端和服务端，客户端发来多个请求，都可能是不同线程处理吗，那这个客户端的一些数据不就不共享 了吗</p>
<p>bot：<br>您提出的这三个问题层层递进，非常精准地触及了Web应用工作的核心原理。您的理解和推断<strong>完全正确</strong>，我们来把这其中的“为什么”和“如何解决”彻底讲清楚。</p>
<h3 id="1-所有HTTP请求都是独立的，无状态的吗？"><a href="#1-所有HTTP请求都是独立的，无状态的吗？" class="headerlink" title="1. 所有HTTP请求都是独立的，无状态的吗？"></a>1. 所有HTTP请求都是独立的，无状态的吗？</h3><p>是的，您的第一个理解是完全正确的。从<strong>协议层面</strong>讲，HTTP本身就是被设计成<strong>无状态（Stateless）</strong>的。</p>
<p>这意味着，服务器在处理一个HTTP请求时，<strong>不会保留任何关于上一次请求的记忆</strong>。每一个请求，对于服务器来说，都是一个全新的、独立的事件。服务器不会自动知道<code>请求B</code>和<code>请求A</code>是来自同一个用户。</p>
<h3 id="2-即使是同一个客户端，多个请求也可能由不同线程处理吗？"><a href="#2-即使是同一个客户端，多个请求也可能由不同线程处理吗？" class="headerlink" title="2. 即使是同一个客户端，多个请求也可能由不同线程处理吗？"></a>2. 即使是同一个客户端，多个请求也可能由不同线程处理吗？</h3><p>是的，您的第二个推断也完全正确。在一个使用了线程池的服务器（如Tomcat）上，来自同一个客户端的连续两次请求，<strong>极有可能由两个完全不同的线程来处理</strong>。</p>
<ul>
<li><p>第一次请求（比如登录）可能由<strong>线程A</strong>处理。</p>
</li>
<li><p>第二次请求（比如获取用户信息）可能由<strong>线程B</strong>处理。</p>
</li>
<li><p>第三次请求（比如加入购物车）可能由<strong>线程C</strong>处理。</p>
</li>
</ul>
<h3 id="3-那这个客户端的一些数据不就不共享了吗？"><a href="#3-那这个客户端的一些数据不就不共享了吗？" class="headerlink" title="3. 那这个客户端的一些数据不就不共享了吗？"></a>3. 那这个客户端的一些数据不就不共享了吗？</h3><p>基于以上两点，您得出了一个非常敏锐的结论：“<strong>那这个客户端的一些数据不就不共享了吗</strong>”。<strong>完全正确！</strong></p>
<p>如果没有额外的机制，数据确实就丢失了。线程A处理登录成功后，这个“已登录”的状态只存在于线程A本次方法调用的内存中，请求一结束，线程A被回收，这个状态就消失了。当线程B来处理下一个请求时，它完全不知道这个用户已经登录了。</p>
<hr>
<h3 id="解决方案：会话管理-Session-Management"><a href="#解决方案：会话管理-Session-Management" class="headerlink" title="解决方案：会话管理 (Session Management)"></a>解决方案：会话管理 (Session Management)</h3><p>为了解决这个“无状态”协议和“有状态”业务需求（比如记住登录状态、购物车内容）之间的矛盾，Web开发中引入了一个至关重要的机制——<strong>会话管理（Session Management）</strong>。</p>
<p>我们可以把它想象成去超市的<strong>“储物柜”</strong>：</p>
<ol>
<li><p><strong>第一次交互（创建会话）</strong></p>
<ul>
<li><p>您（客户端）第一次来到超市（服务器）。</p>
</li>
<li><p>超市前台（服务器程序）为您分配了一个<strong>专属的储物柜</strong>，并给了您一把<strong>独一无二的钥匙</strong>。</p>
</li>
<li><p>在技术上：服务器会创建一个<strong>Session对象</strong>来存储您的专属数据（比如登录信息），并生成一个<strong>Session ID</strong>作为这个对象的唯一标识。这把“钥匙”（Session ID）通常会通过<strong>HTTP Cookie</strong>发送给您的浏览器。</p>
</li>
</ul>
</li>
<li><p><strong>后续交互（维持会话）</strong></p>
<ul>
<li><p>您在超市里逛，每次需要存取东西时，都得出示您的<strong>钥匙（Cookie）</strong>。</p>
</li>
<li><p>在技术上：您的浏览器在后续向该服务器发送<strong>所有请求</strong>时，都会自动附带上这个包含<strong>Session ID</strong>的Cookie。</p>
</li>
</ul>
</li>
<li><p><strong>不同线程处理（共享数据）</strong></p>
<ul>
<li><p>这次您找到了一个不同的工作人员（<strong>线程B</strong>）。</p>
</li>
<li><p>这个工作人员（线程B）不认识您，但他认识您出示的<strong>钥匙（Session ID）</strong>。</p>
</li>
<li><p>他会根据这把钥匙，去储物柜区域（<strong>一个所有线程都能访问的共享存储区，比如Redis或服务器内存</strong>），找到专属于您的那个储物柜（Session对象），然后就可以操作里面的东西了（读取您的登录状态、修改您的购物车）。</p>
</li>
</ul>
</li>
</ol>
<p><strong>总结：</strong> 所以，虽然HTTP协议是无状态的，处理请求的线程也是随机的，但我们通过<strong>Cookie</strong>这个小小的“信物”，在客户端和服务器之间建立了一个<strong>逻辑上</strong>的持续连接（会话）。</p>
<p>服务器端的<strong>任何一个线程</strong>，只要拿到了请求中带来的**[[Session ID]]<strong>，就可以去一个</strong>集中的、共享的地方**（比如Redis）找到这个客户端的专属数据，从而实现了跨请求、跨线程的数据共享。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>JavaBean的编译时安全(Mapper和Bean对比）</title>
    <url>/2025/09/18/java%E7%9F%A5%E8%AF%86/JavaBean%E7%9A%84%E7%BC%96%E8%AF%91%E6%97%B6%E5%AE%89%E5%85%A8(Mapper%E5%92%8CBean%E5%AF%B9%E6%AF%94%EF%BC%89/</url>
    <content><![CDATA[<p>JavaBean的编译时安全，本质上源于Java的<strong>静态类型检查</strong>机制。</p>
<p>[[Bean]]通过预定义的私有字段和公有的getter&#x2F;setter方法，与编译器之间建立了一种 <em>“强制契约”</em>。相比于<code>Map&lt;String, Object&gt;</code>这类只有在运行时才能发现问题的弱类型容器，任何对Bean的非法操作，例如：</p>
<ol>
<li><p><strong>方法名拼写错误</strong>（如将<code>setName</code>错写为<code>setNamme</code>）。</p>
</li>
<li><p><strong>传入参数类型不匹配</strong>（如为<code>int</code>类型的字段传入<code>String</code>）。</p>
</li>
</ol>
<p>这些违反“契约”的行为，都会在<strong>编译阶段</strong>被编译器立即识别并报错，导致编译失败。</p>
<p>这种将错误检查从不可控的“运行时”提前到可控的“编译时”的机制，能从源头上杜绝大量因低级错误引发的<code>NullPointerException</code>和<code>ClassCastException</code>等运行时异常，从而显著提升代码的<strong>健壮性</strong>、<strong>稳定性和可维护性</strong>。</p>
<h1 id="对比Map："><a href="#对比Map：" class="headerlink" title="对比Map："></a>对比Map：</h1><h3 id="1-不安全的-Map-示例"><a href="#1-不安全的-Map-示例" class="headerlink" title="1. 不安全的 Map 示例"></a>1. 不安全的 <code>Map</code> 示例</h3><p>使用<code>Map</code>时，编译器无法检查Key的拼写或Value的类型，所有错误都只能在程序运行起来后才会暴露。</p>
<p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeMapExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- 使用Map ---&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; personMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 错误1：Key拼写错误 (&quot;name&quot; -&gt; &quot;namme&quot;)</span></span><br><span class="line">        <span class="comment">// 编译器无法发现这个错误，因为Map的Key是字符串，其内容不受编译检查。</span></span><br><span class="line">        personMap.put(<span class="string">&quot;namme&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 错误2：Value类型错误 (应为Integer，却存入了String)</span></span><br><span class="line">        <span class="comment">// 编译器也无法发现这个错误，因为Map的值被声明为Object，可以接受任何类型。</span></span><br><span class="line">        personMap.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;三十&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;代码编译成功，程序开始运行...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试使用数据，此时错误才会暴露</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试获取name，但因为key拼写错误，得到的是null</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) personMap.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            System.out.println(name.toUpperCase()); <span class="comment">// 程序在这里会因NullPointerException而崩溃</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误暴露点1：尝试使用name时，程序因 &quot;</span> + e.getClass().getSimpleName() + <span class="string">&quot; 而崩溃！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试获取age，虽然key正确，但类型错误，转换时会失败</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> (<span class="type">int</span>) personMap.get(<span class="string">&quot;age&quot;</span>); <span class="comment">// 程序在这里会因ClassCastException而崩溃</span></span><br><span class="line">            System.out.println(<span class="string">&quot;年龄: &quot;</span> + age);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误暴露点2：尝试使用age时，程序因 &quot;</span> + e.getClass().getSimpleName() + <span class="string">&quot; 而崩溃！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-安全的-Bean-示例"><a href="#2-安全的-Bean-示例" class="headerlink" title="2. 安全的 Bean 示例"></a>2. 安全的 <code>Bean</code> 示例</h3><p>使用<code>Bean</code>时，编译器会根据类的定义（“契约”）来严格检查方法名和参数类型，任何不匹配都会直接导致编译失败。</p>
<p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定义一个“契约”：PersonBean类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeBeanExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- 使用Bean ---&quot;</span>);</span><br><span class="line">        <span class="type">PersonBean</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 错误1：方法名拼写错误</span></span><br><span class="line">        <span class="comment">// 下面这行代码会导致编译失败！编译器会立即报错：“找不到setNamme方法”。</span></span><br><span class="line">        <span class="comment">// person.setNamme(&quot;张三&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 错误2：参数类型不匹配</span></span><br><span class="line">        <span class="comment">// 下面这行代码同样会导致编译失败！编译器会报错：“setAge方法需要int类型参数，而不是String”。</span></span><br><span class="line">        <span class="comment">// person.setAge(&quot;三十&quot;);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;上面的错误代码必须被注释掉，程序才能通过编译。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只有完全正确的代码才能成功编译和运行</span></span><br><span class="line">        person.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名: &quot;</span> + person.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄: &quot;</span> + person.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;程序健壮地运行成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2025/09/20/java%E7%9F%A5%E8%AF%86/Tomcat/</url>
    <content><![CDATA[<p>Spring框架在建立好单例池之后，Tomcat服务器就可以开始工作了。就和之前Python socket那个实验一样。Tomcat服务器主要负责监听请求，并选择空闲线程，把这个请求（根据主线程当前主力的http connection上下文 去构建 task）交给他处理。然后这个线程会去执行1个task（就是一个lambda函数定义的借口），{线程一旦创建，这个task就被复制到他的线程私有栈里了，就包括http上下文。task其中包括了要先解析HTTP请求（一个HTTPrequest对象），根据里面的URL和GET&#x2F;POST等方法，找到对应是哪个controller的哪个方法（事先已注册），然后这个线程会走到这个方法里面，这个方法可能又会调研别的方法，就这样在线程A的栈内存上不断压栈。最后controller返回了，再打包成一个http请求}</p>
<p>&#x3D;&#x3D;Tomcat伪代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"><span class="comment">// 场景：Spring Boot应用启动时</span></span><br><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Spring容器初始化，并创建好所有单例Bean</span></span><br><span class="line"><span class="comment">// 这个controller对象在内存中有且仅有一个</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Controller</span> <span class="variable">controller</span> <span class="operator">=</span> springContext.getBean(Controller.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Tomcat服务器启动，并创建自己的核心组件</span></span><br><span class="line"><span class="comment">// 创建一个固定大小的“工人”线程池，所有线程都处于待命状态</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个服务器Socket，在8080端口上监听连接</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"><span class="comment">// 场景：Tomcat开始接收请求（这是一个无限循环）</span></span><br><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 监听并接收一个客户端连接 (此步骤会阻塞，直到有新请求进来)</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">clientConnection</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 为这个连接创建一个“任务”</span></span><br><span class="line">        <span class="comment">// 这个任务包含了处理该请求需要做的所有事情</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">requestHandlingTask</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// a. 解析原始的网络连接数据，构建成HttpRequest对象</span></span><br><span class="line">                <span class="type">HttpRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> parseHttpRequest(clientConnection);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// b. Spring的DispatcherServlet进行路径匹配，找到对应的Controller方法</span></span><br><span class="line">                <span class="comment">//    (这是一个非常复杂的内部过程，此处简化)</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> findHandlerMethodFor(httpRequest); </span><br><span class="line"></span><br><span class="line">                <span class="comment">// c. 解析请求参数，准备将要传入Controller方法的实参</span></span><br><span class="line">                Object[] methodArgs = resolveMethodArguments(httpRequest, targetMethod);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// d. 【核心步骤】调用Controller方法</span></span><br><span class="line">                <span class="comment">//    注意：执行这行代码的，正是从线程池中取出的那个工人线程</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> targetMethod.invoke(controller, methodArgs);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// e. 将Controller方法的返回值（比如一个User对象）打包成HTTP响应</span></span><br><span class="line">                <span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> buildHttpResponse(result);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// f. 将HTTP响应通过网络连接发送回客户端</span></span><br><span class="line">                sendHttpResponse(clientConnection, httpResponse);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 处理请求过程中发生的任何错误</span></span><br><span class="line">                handleError(clientConnection, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 确保网络连接被关闭</span></span><br><span class="line">                closeConnection(clientConnection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 将这个“任务”提交给线程池去执行</span></span><br><span class="line">        <span class="comment">// 线程池会自动选择一个空闲的工人线程，来运行上面定义的task</span></span><br><span class="line">        threadPool.submit(requestHandlingTask);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// 处理服务器接收连接时发生的错误</span></span><br><span class="line">        logServerError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>单例如何被多线程执行</title>
    <url>/2025/09/20/java%E7%9F%A5%E8%AF%86/%E5%8D%95%E4%BE%8B%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>[[JVM内存]]中，类的方法被存放在 方法区， 实例化后的实例 被存放在 堆区。</p>
<p>[[Tomcat]]服务器会负责创建线程，并给每一个http请求分配一个线程，这个线程通过调用controller实例.方法() 去调用这个单例的方法。http请求的context会被交给这个线程的栈区，然后根据实例去找 方法区的 方法，去执行。<br>方法就是程序代码，每个线程的栈数据 配合 这个程序代码 就可以顺利执行了。不需要考虑数据覆盖，因为我们并没有使用这个实例的成员变量（存放在堆区），而是在方法内部（该方法的栈内存里 存放了临时数据，因此不存在共享问题）</p>
<p>&#x3D;&#x3D;好的，没有问题。我们用一个非常具体、符合Spring Boot开发实践的例子，来完整地走一遍从HTTP请求到达Tomcat，到您的Controller方法被执行的全流程。</p>
<h3 id="场景设定"><a href="#场景设定" class="headerlink" title="场景设定"></a>场景设定</h3><ul>
<li><p><strong>HTTP请求</strong>：一个客户端（比如浏览器）向您的应用发送了一个请求，想要获取ID为<code>123</code>的用户信息。</p>
<ul>
<li><p>请求方法：<code>GET</code></p>
</li>
<li><p>请求URL：<code>http://localhost:8080/users/123</code></p>
</li>
</ul>
</li>
<li><p><strong>您的Controller代码</strong>：您在项目中编写了一个<code>UserController</code>。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法是我们的目标入口点</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前执行线程: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="comment">// 调用Service层的方法</span></span><br><span class="line">        <span class="keyword">return</span> userService.findUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="详细流程分解"><a href="#详细流程分解" class="headerlink" title="详细流程分解"></a>详细流程分解</h3><h4 id="第1步：Tomcat-接收网络连接"><a href="#第1步：Tomcat-接收网络连接" class="headerlink" title="第1步：Tomcat 接收网络连接"></a>第1步：Tomcat 接收网络连接</h4><ol>
<li><p><strong>监听端口</strong>：您的Spring Boot应用启动后，内嵌的Tomcat服务器就已经开始在<code>8080</code>端口上监听网络连接。</p>
</li>
<li><p><strong>解析请求</strong>：当<code>GET /users/123</code>的HTTP请求到达服务器时，Tomcat接收到这个网络数据包。它会按照HTTP协议的规范，将这些原始的文本数据，解析成一个Java世界里能理解的对象——<code>HttpServletRequest</code>。这个对象里包含了请求的所有信息（GET方法、<code>/users/123</code>路径、请求头等）。</p>
</li>
</ol>
<h4 id="第2步：Tomcat-分配线程"><a href="#第2步：Tomcat-分配线程" class="headerlink" title="第2步：Tomcat 分配线程"></a>第2步：Tomcat 分配线程</h4><ol>
<li><p><strong>从线程池取线程</strong>：Tomcat从它内部维护的<strong>线程池</strong>中，取出一个空闲的<strong>“工人线程”</strong>（我们假设它的名字是<code>http-nio-8080-exec-1</code>）。</p>
</li>
<li><p><strong>分配任务</strong>：Tomcat将上一步解析好的<code>HttpServletRequest</code>对象，交给了这个工人线程，让它全权负责处理这次请求的后续所有流程。</p>
</li>
</ol>
<h4 id="第3步：Spring-Boot-的入口-DispatcherServlet"><a href="#第3步：Spring-Boot-的入口-DispatcherServlet" class="headerlink" title="第3步：Spring Boot 的入口 - DispatcherServlet"></a>第3步：Spring Boot 的入口 - <code>DispatcherServlet</code></h4><p>工人线程<code>http-nio-8080-exec-1</code>拿到了请求，它首先会把请求交给Spring框架的总入口——**<code>DispatcherServlet</code>**。<code>DispatcherServlet</code>是Spring MVC的核心，负责所有请求的统一分发。</p>
<h4 id="第4th步：HandlerMapping-寻找处理方法"><a href="#第4th步：HandlerMapping-寻找处理方法" class="headerlink" title="第4th步：HandlerMapping 寻找处理方法"></a>第4th步：<code>HandlerMapping</code> 寻找处理方法</h4><p><code>DispatcherServlet</code>并不知道这个<code>GET /users/123</code>请求具体应该由哪个代码来处理。于是它会去问一个叫做**<code>HandlerMapping</code>**的组件。</p>
<ul>
<li><p><code>HandlerMapping</code>在应用启动时，就已经扫描了所有被<code>@Controller</code>或<code>@RestController</code>注解的类，并记录下了所有方法的URL映射规则。</p>
</li>
<li><p>它看到请求是<code>GET /users/123</code>，经过匹配，发现这完全符合<code>UserController</code>类中，被<code>@GetMapping(&quot;/users/&#123;id&#125;&quot;)</code>注解的<code>getUserById</code>方法的规则。</p>
</li>
<li><p>现在，<code>HandlerMapping</code>就告诉<code>DispatcherServlet</code>：“处理这个请求的，是<code>UserController</code>那个单例对象的<code>getUserById</code>方法”。</p>
</li>
</ul>
<h4 id="第5步：HandlerAdapter-执行方法调用"><a href="#第5步：HandlerAdapter-执行方法调用" class="headerlink" title="第5步：HandlerAdapter 执行方法调用"></a>第5步：<code>HandlerAdapter</code> 执行方法调用</h4><p><code>DispatcherServlet</code>知道了具体目标后，会使用一个**<code>HandlerAdapter</code>**组件来执行这次方法调用。</p>
<ul>
<li><p><strong>参数解析</strong>：<code>HandlerAdapter</code>会分析<code>getUserById</code>方法的签名<code>(@PathVariable Long id)</code>。它看到<code>@PathVariable</code>注解，就知道需要从URL路径<code>/users/123</code>中，把<code>123</code>这部分提取出来，转换成<code>Long</code>类型的数字。</p>
</li>
<li><p><strong>方法调用</strong>：准备好参数后，工人线程<code>http-nio-8080-exec-1</code><strong>正式执行了方法调用</strong>：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 底层发生的调用，由线程 http-nio-8080-exec-1 执行</span></span><br><span class="line">userController.getUserById(<span class="number">123L</span>); </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="第6步：线程在您的代码中执行"><a href="#第6步：线程在您的代码中执行" class="headerlink" title="第6步：线程在您的代码中执行"></a>第6步：线程在您的代码中执行</h4><p>至此，<strong>线程A（<code>http-nio-8080-exec-1</code>）</strong>的执行权，正式进入了您编写的<code>UserController</code>的<code>getUserById</code>方法内部。</p>
<ul>
<li><p><strong>压入栈帧</strong>：一个<code>getUserById(123L)</code>的栈帧被压入了<strong>线程A的私有栈</strong>。</p>
</li>
<li><p><strong>打印线程名</strong>：代码执行<code>System.out.println(...)</code>，您会在控制台看到输出<code>当前执行线程: http-nio-8080-exec-1</code>。</p>
</li>
<li><p><strong>调用Service</strong>：当线程A执行到<code>userService.findUser(id)</code>时，它会<strong>暂停</strong>在这一行，然后<strong>进入</strong><code>UserService</code>的<code>findUser</code>方法内部继续执行。<strong>执行者依然是线程A</strong>，并且一个新的<code>findUser(123L)</code>的栈帧会被压在<code>getUserById</code>栈帧的上方。</p>
</li>
<li><p><strong>逐层返回</strong>：<code>findUser</code>方法从数据库拿到数据，返回一个<code>User</code>对象。<code>findUser</code>栈帧弹出，执行权回到<code>getUserById</code>。<code>getUserById</code>再将这个<code>User</code>对象向上返回。</p>
</li>
</ul>
<h4 id="第7步：响应与线程回收"><a href="#第7步：响应与线程回收" class="headerlink" title="第7步：响应与线程回收"></a>第7步：响应与线程回收</h4><ol>
<li><p><strong>JSON序列化</strong>：<code>DispatcherServlet</code>拿到Controller返回的<code>User</code>对象。因为是<code>@RestController</code>，Spring会通过一个叫做<code>HttpMessageConverter</code>的组件（通常是Jackson），将<code>User</code>对象序列化成JSON字符串。</p>
</li>
<li><p><strong>返回响应</strong>：工人线程<code>http-nio-8080-exec-1</code>带着这个JSON字符串，交还给Tomcat。</p>
</li>
<li><p><strong>Tomcat发送数据</strong>：Tomcat将JSON数据打包成一个HTTP响应，通过网络发送回客户端。</p>
</li>
<li><p><strong>线程回收</strong>：<code>http-nio-8080-exec-1</code>完成了它的使命，<strong>被交还给线程池</strong>，等待处理下一个请求。</p>
</li>
</ol>
<p>这个流程清晰地展示了，您虽然没有手动创建线程，但Tomcat和Spring框架在背后为您处理了所有复杂的线程管理和请求分发工作。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Java单例是如何存储中间变量</title>
    <url>/2025/09/20/java%E7%9F%A5%E8%AF%86/Java%E5%8D%95%E4%BE%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>结论：springboot由于是单例的，因此不能存储类的成员变量。因为会存在2个线程同时对一个类中的成员变量进行修改的问题。因此本地变量绝对不能存值。</p>
<p>但是如果你在类的方法里面创建局部变量，那么这个局部变量会被放在 栈 上。2个线程同时访问这个单例的时候[[单例如何被多线程执行]]，不同线程的栈里的局部数据 各自不干扰，</p>
<p>&#x3D;&#x3D;<strong>写在方法里的变量（局部变量）</strong>：因为每个线程都有自己独立的栈内存，所以它们是<strong>线程安全的</strong>。<br> <strong>写在方法外的变量（成员变量）</strong>：因为单例Bean只有一个实例，这个变量是所有线程共享的，直接修改它会产生冲突，所以是<strong>线程不安全的</strong>。但如果这个变量是无状态的，那不安全也无所谓</p>
<ul>
<li><p><strong>有状态的成员变量（线程不安全❌）</strong>：</p>
<ul>
<li><p><strong>定义</strong>：它的值会因为某一个用户的具体请求而被<strong>修改</strong>。</p>
</li>
<li><p><strong>例子</strong>：<code>private int counter;</code> <code>private String currentSessionId;</code></p>
</li>
<li><p><strong>结论</strong>：在单例Bean中<strong>绝对禁止</strong>使用。</p>
</li>
</ul>
</li>
<li><p><strong>无状态的成员变量（线程安全✅）</strong>：</p>
<ul>
<li><p><strong>定义</strong>：它的值在程序启动后，通常是<strong>固定不变的、只读的</strong>。它不存储任何与单次请求相关的信息。</p>
</li>
<li><p><strong>例子</strong>：<code>@Autowired private RedisTemplate redisTemplate;</code> <code>@Value(&quot;$&#123;app.config.name&#125;&quot;) private final String appName;</code></p>
</li>
<li><p><strong>结论</strong>：在单例Bean中<strong>是安全且必要的</strong>。它们是这个单例Bean完成工作所需要的“工具”或“配置”，而不是用来记录工作的“临时笔记”。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2025/09/21/java%E7%9F%A5%E8%AF%86/JVM/</url>
    <content><![CDATA[<p><img src="/../../images/Pasted%20image%2020250921171924.png"><br>字符串会被放在 堆里，在栈里只会存放他的引用。但是由于java和Python一样，string都是 不可变变量，只读的。如果修改则会创建一个新的对象，因此 不会导致2个线程操作一个字符串时出现 数据不一致问题。</p>
<p>操作数栈就是草稿纸，一行代码计算完之后会从操作数栈出栈，然后把结果存入局部变量表。<br>&#x3D;&#x3D;动态链接（不是一个容器）负责的就是当发生跳转函数B的时候，先去常量池里面找到B的代码地址，然后会把PC的值从原来的下一行代码的地址修改为要跳转后的下一行的地址。方法出口就是会在跳转内层函数前保存执行完之后跳回到刚才要外层的地址。<img src="/../../images/Pasted%20image%2020250921180434.png"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>JVM调优</title>
    <url>/2025/09/21/java%E7%9F%A5%E8%AF%86/JVM%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h1 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h1><h3 id="明确业务场景："><a href="#明确业务场景：" class="headerlink" title="明确业务场景："></a>明确业务场景：</h3><h5 id="1-高吞吐量：批处理，可以容忍单次较大的STW，但是不能太频繁"><a href="#1-高吞吐量：批处理，可以容忍单次较大的STW，但是不能太频繁" class="headerlink" title="1. 高吞吐量：批处理，可以容忍单次较大的STW，但是不能太频繁"></a>1. 高吞吐量：批处理，可以容忍单次较大的STW，但是不能太频繁</h5><p>使用Parallel回收器，因为他在回收的时候会多线程</p>
<p>设置更大的堆内存</p>
<p>-XX:GCTimeRatio&#x3D;19 这是一个吞吐量目标，表示期望GC时间占总时间的比例为 1 &#x2F; (1 + 19) &#x3D; 5%</p>
<h5 id="2-低延迟：web应用，可以频繁GC，但是STW不能太长"><a href="#2-低延迟：web应用，可以频繁GC，但是STW不能太长" class="headerlink" title="2. 低延迟：web应用，可以频繁GC，但是STW不能太长"></a>2. 低延迟：web应用，可以频繁GC，但是STW不能太长</h5><p>使用G1回收器。它的核心优势就是“可预测的停顿时间模型”。<br>因此要合理设置 <strong>基于用户设定的停顿目标</strong>（<code>-XX:MaxGCPauseMillis</code>），G1可以动态地、智能地决定本次回收的工作量（即CSet的大小），从而将停顿时间控制在一个可预期的范围内。 默认是200ms一次的STW</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Java的垃圾回收（Garbage Collection, GC）</title>
    <url>/2025/09/21/java%E7%9F%A5%E8%AF%86/Java%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88Garbage%20Collection,%20GC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="1-为什么需要垃圾回收？-The-Why"><a href="#1-为什么需要垃圾回收？-The-Why" class="headerlink" title="1. 为什么需要垃圾回收？ (The Why)"></a>1. 为什么需要垃圾回收？ (The Why)</h1><ul>
<li><p><strong>内存泄漏（Memory Leak）</strong>：忘记释放不再使用的内存，导致内存被耗尽。</p>
</li>
<li><p><strong>悬垂指针（Dangling Pointer）</strong>：释放了内存后，仍然试图去使用它，导致程序崩溃或未知错误。</p>
</li>
</ul>
<h1 id="2-回收什么？在哪里回收？-The-What-Where"><a href="#2-回收什么？在哪里回收？-The-What-Where" class="headerlink" title="2. 回收什么？在哪里回收？ (The What &amp; Where)"></a>2. 回收什么？在哪里回收？ (The What &amp; Where)</h1><ul>
<li><p><strong>在哪里回收</strong>：GC的主要工作区域是&#x3D;&#x3D;**[[JVM]]的堆内存（Heap）&#x3D;&#x3D;**。几乎所有的Java对象实例和数组都在这里被创建。</p>
</li>
<li><p><strong>回收什么</strong>：GC回收的是堆中那些<strong>“&#x3D;&#x3D;不再被任何存活的线程所引用&#x3D;&#x3D;”</strong>的对象，我们称这些对象为“垃圾”。</p>
</li>
</ul>
<h1 id="3-何时回收？"><a href="#3-何时回收？" class="headerlink" title="3. 何时回收？"></a>3. 何时回收？</h1><p>内存不够了才会触发回收</p>
<h1 id="3-5-如何判断对象是否存活"><a href="#3-5-如何判断对象是否存活" class="headerlink" title="3.5 如何判断对象是否存活?"></a>3.5 如何判断对象是否存活?</h1><p>GC Root：所有栈帧的局部变量表里面引用的对象<br>所有从GC Roots里面的对象引用链</p>
<h1 id="4-Parallel回收器（Java8）"><a href="#4-Parallel回收器（Java8）" class="headerlink" title="4. Parallel回收器（Java8）"></a>4. Parallel回收器（Java8）</h1><p><img src="/../../images/Pasted%20image%2020250921205412.png"></p>
<h5 id="新生代：标记-复制法，STW短，触发频繁，对业务影响小"><a href="#新生代：标记-复制法，STW短，触发频繁，对业务影响小" class="headerlink" title="新生代：标记-复制法，STW短，触发频繁，对业务影响小"></a>新生代：标记-复制法，STW短，触发频繁，对业务影响小</h5><p>新生成的对象会被放到Eden。每次Minor GC都会统计Eden和启用的Survivor的存活对象，然后放到另一个Survivor。然后两个Survivor的身份就互换。</p>
<p>由于大部分对象都“朝生夕死”，因此复制的代价低。</p>
<p>一个对象每撑过一次GC，年龄就会+1， 达到设置的阈值之后就会进入老年代。</p>
<h5 id="老年代：标记-整理法，STW长，堆业务影响大，应避免频繁发生"><a href="#老年代：标记-整理法，STW长，堆业务影响大，应避免频繁发生" class="headerlink" title="老年代：标记-整理法，STW长，堆业务影响大，应避免频繁发生"></a>老年代：标记-整理法，STW长，堆业务影响大，应避免频繁发生</h5><p>老年代对象的整理需要排列在一起，防止碎片。因此开销大，通常是秒级，理想状态下一天才会一次Major GC</p>
<h1 id="5-G1回收器（Java9开始）"><a href="#5-G1回收器（Java9开始）" class="headerlink" title="5. G1回收器（Java9开始）"></a>5. G1回收器（Java9开始）</h1><p>内存被分成比如2048个region，region的身份在 空闲，Eden，Survivor，Hugumorous， Old之间反复横跳。</p>
<h5 id="新生代回收："><a href="#新生代回收：" class="headerlink" title="新生代回收："></a>新生代回收：</h5><p>G1会根据设置的最大STW阈值，判断要不要限制继续GC，都会分别堆E和S区 进行 &#x3D;&#x3D;标记-复制法&#x3D;&#x3D;，将他们复制到空闲region里，然后清理老region。</p>
<h5 id="老年代回收：mixed-gc"><a href="#老年代回收：mixed-gc" class="headerlink" title="老年代回收：mixed-gc"></a>老年代回收：mixed-gc</h5><p>当O区要回收的时候，采用mixed-gc。清理所有新生代 和 部分 回收价值高的 Old区<br><img src="/../../images/Pasted%20image%2020250921220318.png"><br><a href="JVM%E8%B0%83%E4%BC%98.md">JVM调优</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>PostgreSQL 比 Mysql 强在哪？</title>
    <url>/2025/09/21/%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL%20%E6%AF%94%20Mysql%20%E5%BC%BA%E5%9C%A8%E5%93%AA%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li>Mysql数据页是存放在主键那棵树的叶子节点里。如果在其他维度上简历了索引，那其他的树的叶子节点存放的是主键id，因此你拿到主键id之后，还要去主树再查找一次。（聚簇索引）。<br>而PostgreSQL的所有索引的树的叶子存放的都是指针，数据页存放在堆空间里。因此主键还是其他索引的查找效率是一致的</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>静态变量</title>
    <url>/2025/09/21/java%E7%9F%A5%E8%AF%86/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>静态变量就是用 static 修饰的变量</p>
<p>和Python一样，静态变量也成为类变量。是专属于类的，不会每个实例都有一个。因此他被存放在JVM的元空间</p>
<p>生存周期和类一样长，也就是整个程序的寿命</p>
<p>可以通过类名直接访问</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Redis Hash</title>
    <url>/2025/09/22/Redis/Redis%20Hash/</url>
    <content><![CDATA[<h3 id="1-核心概念：值（Value）本身是一个字典"><a href="#1-核心概念：值（Value）本身是一个字典" class="headerlink" title="1. 核心概念：值（Value）本身是一个字典"></a>1. 核心概念：值（Value）本身是一个字典</h3><p>Redis的Hash类型，您可以把它理解为一个<strong>“存在值（Value）中的小型字典”</strong>。</p>
<p>与String类型一个键（Key）只对应一个简单的值不同，一个Hash类型的键，对应的是一个包含<strong>多个字段（Field）和值（Value）的映射表</strong>。</p>
<p><strong>比喻：</strong></p>
<blockquote>
<p>假设您有一个储物柜，用来存放ID为<code>user:1001</code>的用户信息。</p>
<ul>
<li><p><strong>如果用String类型</strong>：您需要为每个属性都占用一个独立的柜子。</p>
<ul>
<li><p><code>SET user:1001:name &quot;张三&quot;</code></p>
</li>
<li><p><code>SET user:1001:age 25</code></p>
</li>
<li><p><code>SET user:1001:city &quot;上海&quot;</code></p>
</li>
</ul>
</li>
<li><p><strong>如果用Hash类型</strong>：您只需要占用<strong>一个</strong>名为<code>user:1001</code>的大柜子。柜子内部被分成了<strong>带标签的小抽屉</strong>。</p>
<ul>
<li><p><code>name</code>抽屉里放着<code>&quot;张三&quot;</code>。</p>
</li>
<li><p><code>age</code>抽屉里放着<code>&quot;25&quot;</code>。</p>
</li>
<li><p><code>city</code>抽屉里放着<code>&quot;上海&quot;</code>。</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>这个大柜子就是Hash，里面的小抽屉就是字段（Field）。</p>
<hr>
<h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><ul>
<li><p><strong>设置&#x2F;新增</strong>：</p>
<ul>
<li><p><code>HSET key field value</code>：为一个哈希表<code>key</code>中的字段<code>field</code>设置值<code>value</code>。如果字段已存在，则覆盖；如果不存在，则创建。</p>
<p>  Code snippet</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HSET user:1001 name &quot;张三&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HSET key field1 value1 field2 value2 ...</code>：一次性设置多个字段和值。</p>
<p>  Code snippet</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HSET user:1001 age 25 city &quot;上海&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取</strong>：</p>
<ul>
<li><p><code>HGET key field</code>：获取指定哈希表中指定字段的值。</p>
<p>  Code snippet</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HGET user:1001 name  # 返回 &quot;张三&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HMGET key field1 field2 ...</code>：一次性获取多个字段的值。</p>
</li>
<li><p><code>HGETALL key</code>：获取该哈希表中<strong>所有</strong>的字段和值。</p>
</li>
</ul>
</li>
<li><p><strong>删除</strong>：</p>
<ul>
<li><code>HDEL key field1 [field2 ...]</code>：删除一个或多个字段。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis中常见的数据类型</title>
    <url>/2025/09/22/Redis/Redis%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>redis中的key只能是string，而value可以是以下9种数据类型</p>
<p>常见类型：</p>
<ol>
<li>String（max 512MB）</li>
<li>List</li>
<li>[[Redis Hash]]</li>
<li>Set</li>
<li>Zset（有序集合）</li>
</ol>
<p>不常见类型：<br>6. BItMap<br>7. HyperLogLog（统计）<br>8. GEO（坐标）<br>9. Strean（流）</p>
<h3 id="1-String-字符串"><a href="#1-String-字符串" class="headerlink" title="1. String (字符串)"></a>1. String (字符串)</h3><ul>
<li><p><strong>简介</strong>：这是 Redis 最基础的数据类型，可以存储任何形式的字符串，包括文本、序列化的JSON、甚至是二进制数据（如图片）。一个键（Key）对应一个字符串值（Value）。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>缓存</strong>：缓存用户信息、文章详情或首页数据。</p>
<ul>
<li><p><code>SET user:123 &quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;, \&quot;age\&quot;:25&#125;&quot;</code></p>
</li>
<li><p><code>GET user:123</code></p>
</li>
</ul>
</li>
<li><p><strong>计数器</strong>：利用其原子性的 <code>INCR</code> (加一) 和 <code>DECR</code> (减一) 命令，可以非常高效地实现网站页面浏览量、用户点赞数等功能。</p>
<ul>
<li><code>INCR article:post-001:views</code> (每次有人浏览文章，就执行此命令)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-Hash-哈希-字典"><a href="#2-Hash-哈希-字典" class="headerlink" title="2. Hash (哈希&#x2F;字典)"></a>2. Hash (哈希&#x2F;字典)</h3><ul>
<li><p><strong>简介</strong>：一个键（Key）对应一个包含多个字段（field）和值（value）的映射表。它非常适合用来存储对象。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>存储对象信息</strong>：用一个键来存储一个用户对象的多个属性，比为每个属性都创建一个String类型的键更节省内存，也更便于管理。</p>
<ul>
<li><p><code>HSET user:123 name &quot;张三&quot; age 25 email &quot;zhangsan@example.com&quot;</code></p>
</li>
<li><p><code>HGET user:123 name</code> (只获取用户的名字)</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-List-列表"><a href="#3-List-列表" class="headerlink" title="3. List (列表)"></a>3. List (列表)</h3><ul>
<li><p><strong>简介</strong>：一个字符串列表，按照插入顺序排序。可以在列表的头部（左侧）或尾部（右侧）添加或弹出元素。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p>**社交媒体时间线 (Timeline)**：用户的关注动态、微博或朋友圈的Feed流。最新发布的内容通过 <code>LPUSH</code> 添加到列表左侧，用户获取时通过 <code>LRANGE</code> 从左侧开始读取。</p>
<ul>
<li><p><code>LPUSH user:123:feed &quot;&#123;\&quot;tweet_id\&quot;: 9001, \&quot;text\&quot;: \&quot;今天天气真好！\&quot;&#125;&quot;</code></p>
</li>
<li><p><code>LPUSH user:123:feed &quot;&#123;\&quot;tweet_id\&quot;: 9002, \&quot;text\&quot;: \&quot;晚餐吃了什么？\&quot;&#125;&quot;</code></p>
</li>
</ul>
</li>
<li><p><strong>简单的消息队列</strong>：生产者使用 <code>LPUSH</code> 推送任务，消费者使用 <code>BRPOP</code> (阻塞式弹出) 来获取并处理任务。</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-Set-集合"><a href="#4-Set-集合" class="headerlink" title="4. Set (集合)"></a>4. Set (集合)</h3><ul>
<li><p><strong>简介</strong>：一个<strong>无序</strong>且<strong>元素唯一</strong>的字符串集合。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>标签系统</strong>：为一个文章或商品添加唯一的标签。</p>
<ul>
<li><code>SADD article:post-001 &quot;科技&quot; &quot;AI&quot; &quot;Redis&quot;</code></li>
</ul>
</li>
<li><p><strong>共同好友&#x2F;关注</strong>：利用集合的交集 (<code>SINTER</code>) 运算，可以方便地找出两个用户的共同好友。</p>
<ul>
<li><code>SINTER user:123:friends user:456:friends</code> (获取用户123和456的共同好友)</li>
</ul>
</li>
<li><p><strong>抽奖系统</strong>：将参与抽奖的用户ID存入一个Set，可以天然地保证每个用户只能参与一次。</p>
</li>
</ul>
</li>
</ul>
<h3 id="5-Sorted-Set-ZSET-有序集合"><a href="#5-Sorted-Set-ZSET-有序集合" class="headerlink" title="5. Sorted Set (ZSET, 有序集合)"></a>5. Sorted Set (ZSET, 有序集合)</h3><ul>
<li><p><strong>简介</strong>：和Set类似，也是唯一的字符串元素集合，但每个元素都会关联一个<strong>分数（score）</strong>。Redis会根据这个分数对元素进行<strong>排序</strong>。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>排行榜</strong>：最经典的应用场景。例如，游戏积分排行榜、热门商品销量榜等。</p>
<ul>
<li><p><code>ZADD game:leaderboard 2500 &quot;user:A&quot;</code> (更新用户A的分数为2500)</p>
</li>
<li><p><code>ZADD game:leaderboard 3100 &quot;user:B&quot;</code> (更新用户B的分数为3100)</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-Bitmap-位图"><a href="#6-Bitmap-位图" class="headerlink" title="6. Bitmap (位图)"></a>6. Bitmap (位图)</h3><ul>
<li><p><strong>简介</strong>：Bitmap<strong>不是一个独立的数据类型</strong>，它本质上是<strong>在String类型上进行位操作</strong>。您可以将一个String值看作是一个由二进制位（bit）组成的巨大数组，并可以对任意一位进行<code>SETBIT</code>（设为0或1）和<code>GETBIT</code>（获取值）的操作。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>用户签到&#x2F;活跃度统计</strong>：这是Bitmap最经典的用法。例如，可以用一个Key <code>signin:2025-09</code> 来记录某个月所有用户的签到情况。用户ID作为位的偏移量（offset），签到当天就将该位置1。</p>
<ul>
<li><p><code>SETBIT signin:2025-09 123 1</code> (表示ID为123的用户今天签到了)</p>
</li>
<li><p><code>GETBIT signin:2025-09 123</code> (查询ID为123的用户今天是否签到)</p>
</li>
<li><p><code>BITCOUNT signin:2025-09</code> (可以瞬间统计出今天总共有多少用户签到)</p>
</li>
</ul>
</li>
<li><p><strong>在线状态统计</strong>：用一个Key记录所有在线用户的状态，用户ID为偏移量，上线时置1，下线时置0。</p>
</li>
</ul>
</li>
</ul>
<h3 id="7-HyperLogLog-HLL"><a href="#7-HyperLogLog-HLL" class="headerlink" title="7. HyperLogLog (HLL)"></a>7. HyperLogLog (HLL)</h3><ul>
<li><p><strong>简介</strong>：一种<strong>概率性数据结构</strong>，专门用来做<strong>基数统计</strong>（即统计一个集合中不重复元素的数量）。它的核心特点是<strong>极其节省内存</strong>，并且存在一定的误差。每个HyperLogLog键只需要12KB的内存，就能估算接近<code>2^64</code>个不同元素的基数。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>统计网页的UV（Unique Visitor，独立访客）</strong>：一个网页每天可能有上亿次访问，但我们只想知道有多少个<strong>不同的用户</strong>访问了它。</p>
<ul>
<li><p><code>PFADD page:2025-09-22:uv &quot;user_id_1&quot; &quot;user_id_2&quot; &quot;user_id_1&quot;</code> (将访问页面的用户ID加入统计)</p>
</li>
<li><p><code>PFCOUNT page:2025-09-22:uv</code> (会返回一个接近2的估算值，表示今天大约有2个独立用户访问)</p>
</li>
</ul>
</li>
<li><p><strong>海量数据去重计数</strong>：如统计一个app每日的不同搜索词数量。</p>
</li>
</ul>
</li>
</ul>
<h3 id="8-GEO-地理空间"><a href="#8-GEO-地理空间" class="headerlink" title="8. GEO (地理空间)"></a>8. GEO (地理空间)</h3><ul>
<li><p><strong>简介</strong>：专门用于存储地理位置坐标（经度、纬度）的数据类型，并支持对这些坐标进行复杂的地理空间查询。其底层通常使用Sorted Set实现。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>附近的人&#x2F;地点</strong>：这是GEO最核心的应用。</p>
<ul>
<li><p><code>GEOADD locations 121.47 31.23 &quot;shanghai&quot;</code> (将”shanghai”的经纬度坐标存入)</p>
</li>
<li><p><code>GEOADD locations 116.40 39.90 &quot;beijing&quot;</code></p>
</li>
<li><p><code>GEODIST locations &quot;shanghai&quot; &quot;beijing&quot;</code> (计算上海和北京之间的直线距离)</p>
</li>
<li><p><code>GEORADIUSBYMEMBER locations &quot;shanghai&quot; 1000 km</code> (查找距离上海1000公里以内的所有地点)</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-Stream-流"><a href="#9-Stream-流" class="headerlink" title="9. Stream (流)"></a>9. Stream (流)</h3><ul>
<li><p><strong>简介</strong>：这是Redis 5.0版本引入的、功能最强大的数据结构之一，专门为<strong>消息队列</strong>场景设计。它是一个支持多播、可持久化的、支持消费组的消息日志系统，在概念上与专业的<strong>Kafka</strong>非常相似。</p>
</li>
<li><p><strong>应用举例</strong>：</p>
<ul>
<li><p><strong>专业的、可持久化的消息队列</strong>：它解决了之前用List做消息队列的很多痛点。</p>
<ul>
<li><p><code>XADD my_stream * field1 value1 field2 value2</code> (向名为<code>my_stream</code>的流中添加一条消息)</p>
</li>
<li><p>**消费组 (Consumer Group)**：多个消费者可以组成一个消费组，共同消费同一个流中的消息，每条消息只会被组内的一个消费者处理，这实现了消息队列的负载均衡和高可用。</p>
</li>
<li><p><strong>消息持久化与ACK</strong>：Stream中的消息是持久化的，并且支持显式的消息确认机制。消费者处理完消息后需要发送<code>XACK</code>，如果在规定时间内未确认，消息可以被重新投递给其他消费者，保证了消息的可靠传递。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis集群</title>
    <url>/2025/09/22/Redis/Redis%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>Redis集群 是 去中心化的，对数据进行水平分片，每台机器只会存储部分数据</p>
<p>键空间会被分为16384个槽，每一个key经过CRC16哈希算法，然后堆16384取余，确定他会在哪个槽位。</p>
<p>如果请求的数据正好在这台机器上则返回，如果不在，则该机器会计算出正确的槽位在哪个机器上，然后让请求者自己重新去找那个节点。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis为什么这么快</title>
    <url>/2025/09/22/Redis/Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB/</url>
    <content><![CDATA[<ol>
<li>基于内存：主存速度100ns，ssd 50us， 机械硬盘 1ms</li>
<li>事务单线程（不存在竞争与上锁）+[[IO多路复用]]：<br> 虽然是单线程，但是由于采用了IO多路复用，相当于这个线程不用去处理IO请求，转而由内核的“时间分发器”处理，而单线程可以更安心的处理事务</li>
<li>Redis6.0之后，由于网络请求IO可能太多了，对于处理连接采用了多线程</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis主从同步</title>
    <url>/2025/09/22/Redis/Redis%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>什么是主从同步：<br>    适用于Reids主从架构（非集群）</p>
<p>为什么要主从架构：<br>    Redis在内存里万一掉电了很危险，此外客户端还可以读从节点来分散主节点压力<br><img src="/../../images/Pasted%20image%2020250922202703.png"></p>
<h3 id="主从同步方法："><a href="#主从同步方法：" class="headerlink" title="主从同步方法："></a>主从同步方法：</h3><ol>
<li>全量同步：slave第一次连接，或很长时间没有连接后，进行全量同步<br> slave通过PSYNC请求同步，Master异步地生成RDB文件。在此期间所有新来的写操作会被放在复制积压缓冲区。然后再把RDB文件和缓冲区都发给从节点，从节点把这些装进自己的内存</li>
<li>增量同步：适用于后续同步 或 短暂 断联。master会把自己收到的写命令发给所有的slave自己去执行。（异步）<br>&#x3D;&#x3D;但是这会导致 master和slave的同步不及时（因为为了master为了保证写入的高性能，主从同步是异步的。因此 slave的数据可能是过期的<br>但是这就要看你的应用场景是否能容忍这种不一致：<br>如果你的场景是淘宝商品浏览，或者朋友圈点赞评论，那么即使有客户端拿到了过期数据页无所谓<br>但如果你的场景是银行扣款或者秒杀商城，那就不能接受，可以通过wait命令手动让master节点在主从同步完成后才给客户端响应success</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis的应用场景</title>
    <url>/2025/09/22/Redis/Redis%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<ol>
<li><p>缓存：减轻数据库负载，提高读写速度</p>
</li>
<li><p>消息队列：通过利用Redis的List和Pub&#x2F;Sub功能，可以实现轻量级的消息队列 。</p>
</li>
<li><p>分布式锁：<br> 核心实现原理：利用<code>SETNX</code>命令</p>
<p> 实现Redis分布式锁的核心，是利用<code>SET</code>命令的一个特殊选项：<code>NX</code>。</p>
<ul>
<li><strong><code>SET key value NX</code><strong>：<code>NX</code>是“</strong>N</strong>ot e<strong>X</strong>ists”的缩写。这条命令的含义是：<strong>只有当<code>key</code>不存在时，才会设置<code>key</code>的值为<code>value</code>，并返回成功；如果<code>key</code>已经存在，则什么也不做，并返回失败。</strong></li>
</ul>
<p> 这个操作是<strong>原子性</strong>的，Redis的单线程模型保证了在同一时刻，即使有成千上万个客户端同时发送<code>SETNX</code>命令，也只有一个客户端能成功设置这个key。这就完美地模拟了“抢锁”这个行为。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis哨兵机制</title>
    <url>/2025/09/22/Redis/Redis%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>比如 有主从架构A，B，C<br>现新增3个哨兵D，E，F，负责不断发送Ping Pong监控ABC是否挂了。<br>一旦A挂了，DEF会选举出BC中一个为新的master，更新主从关系，并通知 请求方 更改请求节点。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>热点key优化</title>
    <url>/2025/09/22/Redis/%E7%83%AD%E7%82%B9key%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<ol>
<li>提前将hot key备份多份：<br> 比如在一个秒杀活动前，可能 key：“iPhone17”预测将会被频繁访问，因此我们提前在redis里把“iPhone17”复制多份：“iPhone17 copy1”， “iPhone17 copy2”。<br> 然后在请求的时候，随机在copy1,2中选择，这样请求就不会都打在一个key上了</li>
<li>多级缓存：<br> 再加入比如caffeine本地缓存</li>
<li>使用主从架构，分散读压力</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>Reids</category>
      </categories>
  </entry>
  <entry>
    <title>线程的阻塞与唤醒</title>
    <url>/2025/09/22/os/%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/</url>
    <content><![CDATA[<h3 id="1-线程的状态与队列"><a href="#1-线程的状态与队列" class="headerlink" title="1. 线程的状态与队列"></a>1. 线程的状态与队列</h3><p>首先，在操作系统内核的眼中，任何一个线程都必然处于以下几种核心状态之一：</p>
<ul>
<li><p><strong>运行态（Running）</strong>：线程正在CPU上执行。</p>
</li>
<li><p><strong>就绪态（Ready）</strong>：线程已经万事俱备，只等待被分配CPU时间片就可以运行。</p>
</li>
<li><p><strong>阻塞态（Blocked &#x2F; Waiting）</strong>：线程因为等待某个<strong>事件</strong>的发生（如等待数据、等待锁），而无法继续执行。<strong>即使给它CPU，它也无事可做</strong>。</p>
</li>
</ul>
<p>为了管理这些线程，操作系统内核会维护几个重要的队列：</p>
<ul>
<li><p><strong>就绪队列（Ready Queue）</strong>：存放所有处于“就绪态”的线程。</p>
</li>
<li><p><strong>各种等待队列（Wait Queues）</strong>：存放所有处于“阻塞态”的线程。而且是分门别类地存放，比如，等待磁盘A读取的线程在一个队列，等待网络数据包的在另一个队列，等待某个锁的又在另一个队列。</p>
</li>
</ul>
<hr>
<h3 id="2-从运行到阻塞（如何“睡着”）"><a href="#2-从运行到阻塞（如何“睡着”）" class="headerlink" title="2. 从运行到阻塞（如何“睡着”）"></a>2. 从运行到阻塞（如何“睡着”）</h3><p>当一个正在运行的线程，执行到一个会导致阻塞的操作时，比如：</p>
<ul>
<li><p><code>redisTemplate.opsForList().brpop(...)</code> （等待Redis返回数据）</p>
</li>
<li><p><code>lock.lock()</code> （尝试获取一个已经被其他线程持有的锁）</p>
</li>
<li><p><code>socket.read()</code> （等待网络数据）</p>
</li>
</ul>
<p>它会发起一次<strong>系统调用（System Call）</strong>，从用户态&#x3D;&#x3D;陷入内核态。</p>
<ol>
<li><p><strong>操作系统内核</strong>接管控制权。</p>
</li>
<li><p>内核发现这个请求无法立即完成（比如网卡上还没有数据）。</p>
</li>
<li><p>内核就会：</p>
<ul>
<li><p>&#x3D;&#x3D;<strong>保存</strong>当前线程的所有运行状态（比如程序计数器、寄存器里的值）。</p>
</li>
<li><p>将这个线程的状态从<strong>“运行态”</strong>改为<strong>“阻塞态”</strong>。</p>
</li>
<li><p>将这个线程从CPU上<strong>移除</strong>，并放入到对应事件的<strong>“等待队列”</strong>中。</p>
</li>
<li><p>调用<strong>调度器（Scheduler）</strong>，从<strong>“就绪队列”</strong>中选择另一个线程，放到CPU上运行。</p>
</li>
</ul>
</li>
</ol>
<p>至此，我们的线程就“睡着”了，并且不再占用CPU。</p>
<hr>
<h3 id="3-从阻塞到就绪再到运行（如何“醒来”）"><a href="#3-从阻塞到就绪再到运行（如何“醒来”）" class="headerlink" title="3. 从阻塞到就绪再到运行（如何“醒来”）"></a>3. 从阻塞到就绪再到运行（如何“醒来”）</h3><p>这是回答您问题的核心。线程“醒来”是一个<strong>被动</strong>的过程，它是由<strong>外部事件</strong>触发的。</p>
<ol>
<li><p><strong>事件发生，触发中断</strong>：</p>
<ul>
<li><p>线程等待的那个事件终于发生了。</p>
</li>
<li><p><strong>例子</strong>：一块数据通过网卡到达了服务器。&#x3D;&#x3D;网卡这个硬件设备会立刻向CPU发送一个<strong>硬件中断（Interrupt）</strong>信号。</p>
</li>
<li><p><strong>例子</strong>：另一个持有锁的线程，执行完代码后调用了<code>lock.unlock()</code>，这也会触发一个内核事件。</p>
</li>
</ul>
</li>
<li><p><strong>内核处理中断，唤醒线程</strong>：</p>
<ul>
<li><p>CPU收到中断信号后，会暂停当前正在执行的任何工作，立即跳转去执行操作系统内核中预设好的&#x3D;&#x3D;<strong>中断处理程序</strong>。</p>
</li>
<li><p>这个中断处理程序会分析是什么事件发生了。它发现：“哦，是之前那个Socket来数据了”。</p>
</li>
<li><p>&#x3D;&#x3D;内核会立刻去对应的<strong>“等待队列”</strong>里查找，发现线程A正在等待这个事件。</p>
</li>
<li><p>内核就会：</p>
<ul>
<li><p>将线程A的状态从<strong>“阻塞态”</strong>改为<strong>“就绪态”</strong>。</p>
</li>
<li><p>将线程A从“等待队列”中<strong>移出</strong>，&#x3D;&#x3D;并放入到<strong>“就绪队列”</strong>中，让它去排队等待CPU时间。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>调度器再次选择</strong>：</p>
<ul>
<li><p>现在，线程A已经“醒了”，并且在“就绪队列”中排队。但它<strong>不一定能立刻运行</strong>，前面可能还有其他优先级更高的线程。</p>
</li>
<li><p>操作系统的<strong>调度器</strong>会按照它的调度算法（比如时间片轮转、优先级调度等），在某个合适的时机（比如当前运行线程的时间片用完时），从“就绪队列”中选择了线程A。</p>
</li>
<li><p>调度器会将线程A的状态从<strong>“就绪态”</strong>改为<strong>“运行态”</strong>，恢复它之前被保存的所有运行状态，然后把它放回CPU上，从它上次被阻塞的地方<strong>继续执行</strong>。</p>
</li>
</ul>
</li>
</ol>
<p><strong>总结</strong>： 一个被阻塞的线程，它自己是不知道何时应该“醒来”的。它是被一个<strong>外部事件（通常由硬件中断或内核事件触发）</strong>，由<strong>操作系统内核</strong>被动地唤醒，并从“阻塞态”转移到“就绪态”，最后再由<strong>调度器</strong>在合适的时机，将其重新放回CPU上运行。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>IO多路复用</title>
    <url>/2025/09/22/os/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li><h5 id="传统单路IO：-线程的阻塞与唤醒"><a href="#传统单路IO：-线程的阻塞与唤醒" class="headerlink" title="传统单路IO：[[线程的阻塞与唤醒]]"></a>传统单路IO：[[线程的阻塞与唤醒]]</h5></li>
<li></li>
</ul>
<h1 id="多路复用："><a href="#多路复用：" class="headerlink" title="多路复用："></a>多路复用：</h1><ul>
<li><p><strong>注册</strong>：Redis启动时，会先在内核中创建一个<code>epoll</code>实例。然后，每当有一个新的客户端连接（Socket）建立，Redis就会通过<code>epoll_ctl</code>命令，将这个连接的“文件描述符”&#x3D;&#x3D;注册到<code>epoll</code>实例中，告诉内核：“请帮我监控这个连接”。</p>
</li>
<li><p><strong>等待</strong>：当Redis主线程&#x3D;&#x3D;无事可做时，它会调用<code>epoll_wait</code>并进入<strong>阻塞&#x2F;睡眠</strong>状态，等待事件发生。</p>
</li>
<li><p><strong>中断与唤醒</strong>：一旦某个连接上有IO数据进来，网卡会触发<strong>硬件中断</strong>。内核的&#x3D;&#x3D;中断处理程序（这是内核软件）会接收数据，并将这个“活跃”的连接放入<code>epoll</code>实例内部的一个<strong>“就绪列表”（Ready List）</strong>中&#x3D;&#x3D;。因为就绪列表不再为空，内核就会<strong>唤醒</strong>那个正在<code>epoll_wait</code>上睡眠的Redis线程。</p>
</li>
</ul>
<h3 id="但是每次被放入就绪队列中等待cpu的时候，epoll队列里可能还会进入新的请求，因此可能可以一次性处理好几个请求"><a href="#但是每次被放入就绪队列中等待cpu的时候，epoll队列里可能还会进入新的请求，因此可能可以一次性处理好几个请求" class="headerlink" title="但是每次被放入就绪队列中等待cpu的时候，epoll队列里可能还会进入新的请求，因此可能可以一次性处理好几个请求"></a>但是每次被放入就绪队列中等待cpu的时候，epoll队列里可能还会进入新的请求，因此可能可以一次性处理好几个请求</h3><h3 id="1-“一非空就唤醒吗？”-是的，触发“唤醒”信号"><a href="#1-“一非空就唤醒吗？”-是的，触发“唤醒”信号" class="headerlink" title="1. “一非空就唤醒吗？” -&gt; 是的，触发“唤醒”信号"></a>1. “一非空就唤醒吗？” -&gt; 是的，触发“唤醒”信号</h3><p>可以这么理解：<strong>是的，从“空”到“非空”的转变，是触发线程从“阻塞态”变为“就绪态”的关键信号。</strong></p>
<p>当Redis线程调用<code>epoll_wait</code>并因为就绪列表为空而“睡着”（进入阻塞态）时，一旦内核的中断处理程序将<strong>第一个</strong>活跃的连接放入就绪列表，列表状态从“空”变为“非空”，内核就会<strong>立刻</strong>将Redis线程的状态从“阻塞”改为“就绪”，并把它放入操作系统的可运行队列中，等待CPU的调度。</p>
<h3 id="2-“那epoll队列不是永远不会排队？”-队列依然会形成！"><a href="#2-“那epoll队列不是永远不会排队？”-队列依然会形成！" class="headerlink" title="2. “那epoll队列不是永远不会排队？” -&gt; 队列依然会形成！"></a>2. “那epoll队列不是永远不会排队？” -&gt; 队列依然会形成！</h3><p>这正是epoll强大的地方。<strong>“就绪队列”依然会形成</strong>，并且这正是我们想要的。队列的形成，就发生在我们刚才讨论的那个<strong>时间差</strong>里。</p>
<p>我们来走一个详细的时间线：</p>
<ul>
<li><p><strong>T0时刻</strong>：Redis主线程调用<code>epoll_wait</code>，发现就绪列表为空，进入<strong>睡眠（阻塞态）</strong>。</p>
</li>
<li><p><strong>T1时刻</strong>：一个网络中断发生（比如客户端A发来数据）。</p>
<ul>
<li><p>内核的中断处理程序被执行。</p>
</li>
<li><p>内核将<strong>“连接A”</strong>的句柄放入<code>epoll</code>的就绪列表。</p>
</li>
<li><p>列表从空变为非空。</p>
</li>
<li><p>内核<strong>立刻</strong>将Redis线程的状态从“阻塞”改为“就绪”，并将其放入操作系统的可运行队列中，<strong>排队等待CPU</strong>。</p>
</li>
</ul>
</li>
<li><p>**T2时刻 (关键的时间差)**：</p>
<ul>
<li><p>此时，Redis线程虽然“就绪”了，但<strong>不一定能立刻抢到CPU</strong>。可能CPU正在忙于其他更高优先级的任务，或者当前运行线程的时间片还没用完。</p>
</li>
<li><p>就在这个微小但关键的等待窗口，<strong>新的网络中断又发生了！</strong></p>
</li>
</ul>
</li>
<li><p><strong>T3, T4时刻</strong>：</p>
<ul>
<li><p>客户端B和客户端C的数据也相继到达。</p>
</li>
<li><p>内核处理新的中断，将<strong>“连接B”</strong>和<strong>“连接C”</strong>也放入了<strong>同一个就绪列表</strong>。</p>
</li>
<li><p>现在，就绪列表里有3个待处理的连接：<code>[A, B, C]</code>。<strong>队列形成了！</strong></p>
</li>
</ul>
</li>
<li><p><strong>T5时刻</strong>：</p>
<ul>
<li><p>操作系统的调度器终于将CPU分配给了Redis线程。</p>
</li>
<li><p>此时，<code>epoll_wait</code>调用<strong>正式返回</strong>。</p>
</li>
<li><p>它返回的，是<strong>当前就绪列表中的所有内容</strong>，也就是<code>[A, B, C]</code>这一整个<strong>批次</strong>。</p>
</li>
</ul>
</li>
<li><p><strong>T6时刻</strong>：</p>
<ul>
<li>Redis线程拿到这个包含3个连接的列表，然后在一个循环中，依次处理A、B、C的请求。处理完毕后，再次调用<code>epoll_wait</code>进入睡眠。</li>
</ul>
</li>
</ul>
<p><strong>总结：</strong></p>
<p><code>epoll</code>的强大之处就在于，它允许<strong>内核去“积累”一批就绪的事件</strong>，然后让应用程序线程<strong>一次性地、批量地</strong>将它们取走并处理。</p>
<ul>
<li><p>“唤醒”的<strong>信号</strong>，是在第一个事件到来时就发出了。</p>
</li>
<li><p>但线程<strong>真正开始工作</strong>，是在它被操作系统调度、<code>epoll_wait</code>调用返回之后。</p>
</li>
<li><p>从“发出唤醒信号”到“真正开始工作”的这段时间差，足以让内核的就绪列表里积累起多个待处理的事件。</p>
</li>
</ul>
<p>这极大地减少了用户态和内核态之间的切换次数（相比于每个事件都切换一次），也提升了数据处理的吞吐量，是其高性能的核心所在。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>websocket</title>
    <url>/2025/09/23/HTTP/websocket/</url>
    <content><![CDATA[<p><img src="/../../images/Pasted%20image%2020250923223937.png"></p>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>websocket建立连接前会先使用 http协议发送 报文，在头部字段里说想要升级，服务端回复101后，双方的应用层改用websocket通信<br>Tomcat的代码已经实现了处理http协议 和 ws协议的 切换</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>全双工，双方都可以向对方发起消息，利用了TCP的全双工能力，<br>不像HTTP是半双工，同一时间只能有一个人发送数据，是请求-响应模式，服务端不能主动向客户端发送数据</p>
<p>数据包紧凑，开销比http小</p>
<h3 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h3><p>网络聊天，游戏，飞书这样的在线办公应用。服务端需要频繁地向客户端发送数据（不频繁的话可以用不停地发起HTTP请求的伪全双工）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>三次握手 与 Socket</title>
    <url>/2025/09/23/HTTP/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%20%E4%B8%8E%20Socket/</url>
    <content><![CDATA[<p><img src="/../../images/f9a747bc4e620d1f520aa708f8262e46.jpg"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>为什么不用Java Map本地缓存</title>
    <url>/2025/09/19/Redis/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8Java%20Map%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>因为我们的后端服务是<strong>分布式、多实例部署</strong>的。如果使用本地缓存，用户的第一次请求可能由服务器A处理，第二次请求被负载均衡到了服务器B，服务器B的本地缓存里没有这个用户的对话历史，就会导致记忆丢失。所以，我们需要一个所有后端实例都能访问的<strong>分布式共享缓存</strong>，Redis是这个场景下的业界标准。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis怎么保证缓存与数据库一致性</title>
    <url>/2025/09/23/Redis/Redis%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    <content><![CDATA[<h3 id="1-为什么要直接删除缓存而非修改："><a href="#1-为什么要直接删除缓存而非修改：" class="headerlink" title="1. 为什么要直接删除缓存而非修改："></a>1. 为什么要直接删除缓存而非修改：</h3><p>删除是幂等的，修改不是&#x3D;&#x3D;幂等&#x3D;&#x3D;的。后面的值会覆盖前面的值，这样多次操作下结果顺序可能不一样。而删除的话，就能保证只有db里有数据，下次客户端缓存没命中的话，会去db里查询数据，然后再写回到redis</p>
<h3 id="2-既然已经确定了要删除缓存，那么问题就变成了-先删除缓存再修改db，还是先修改db再删除缓存？"><a href="#2-既然已经确定了要删除缓存，那么问题就变成了-先删除缓存再修改db，还是先修改db再删除缓存？" class="headerlink" title="2. 既然已经确定了要删除缓存，那么问题就变成了 先删除缓存再修改db，还是先修改db再删除缓存？"></a>2. 既然已经确定了要删除缓存，那么问题就变成了 先删除缓存再修改db，还是先修改db再删除缓存？</h3><h3 id="3-删除缓存-修改db-不好"><a href="#3-删除缓存-修改db-不好" class="headerlink" title="3. 删除缓存 + 修改db(不好)"></a>3. 删除缓存 + 修改db(不好)</h3><p>如果一个线程A要修改数据，先把redis删了。此时B发现缓存空了，就去db读了旧数据，然后把旧数据又写回redis了。此后，A才把正确的数据写入db，导致缓存db不一致。<br><img src="/../../images/Pasted%20image%2020250923170101.png"></p>
<h3 id="4-删除缓存-修改db-延迟删除-（-延迟双删）"><a href="#4-删除缓存-修改db-延迟删除-（-延迟双删）" class="headerlink" title="4. 删除缓存 + 修改db + 延迟删除 （ 延迟双删）"></a>4. 删除缓存 + 修改db + 延迟删除 （ 延迟双删）</h3><p>确保及时有别的线程在A的db没有更新成功的间隙读到了脏数据并写回了Redis，延迟双删可以保证这个 脏数据的 误写入 最终还是被 删除了</p>
<h3 id="5-修改db-删除缓存（推荐）"><a href="#5-修改db-删除缓存（推荐）" class="headerlink" title="5.  修改db + 删除缓存（推荐）"></a>5.  修改db + 删除缓存（推荐）</h3><p>除非删除的操作执行失败了，需要设置一个MQ去监控发现失败了就重新去执行删除。<br>其他情况是最好的</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2025/09/23/java%E7%9F%A5%E8%AF%86/RabbitMQ/</url>
    <content><![CDATA[<p><img src="/../../images/Pasted%20image%2020250923213611.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>缓存穿透、缓存击穿、缓存雪崩</title>
    <url>/2025/10/05/Redis/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
    <content><![CDATA[<h1 id="1-缓存穿透："><a href="#1-缓存穿透：" class="headerlink" title="1. 缓存穿透："></a>1. 缓存穿透：</h1><p>请求redis 里不存在的 key，此时会 穿过 redis 去访问 数据库。大量的请求导致数据库压力激增<br><strong>解决方案</strong>：redis 缓存设置空值，或者 布隆过滤器</p>
<h1 id="2-缓存击穿："><a href="#2-缓存击穿：" class="headerlink" title="2. 缓存击穿："></a>2. 缓存击穿：</h1><p>一个 key是热点 key，redis 缓存里失效（过期）了（看起来就像被击穿了），导致大量请求被打到 数据库上。<br><strong>解决方案：</strong> 第一个去访问数据库的请求，为这个数据 设置互斥锁 setnx，后面的请求就不会去访问数据库了，而是返回一个默认值。</p>
<p>法 2：不设置真正的过期时间，而是自己实现逻辑过期时间，当一个请求发现过期时，他会去异步地数据库里更新数据。而由于物理上这个数据在 redis 里没有过期，其他请求会获取到旧数据。</p>
<h1 id="3-缓存雪崩："><a href="#3-缓存雪崩：" class="headerlink" title="3. 缓存雪崩："></a>3. 缓存雪崩：</h1><p>大量缓存击穿同时发生：比如系统初始化的时候，缓存被一起创建，如果他们的过期时间设置的一样，会导致大量数据在同一时间同时失效<br>也可能是 redis 挂了，导致大量请求直接打到数据库<br><strong>解决方案：</strong> 随机设置过期时间<br>对于 redis 挂了：设置哨兵集群</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2025/09/25/%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE/RAG/JSON%20RPC/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
